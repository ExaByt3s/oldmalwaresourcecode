using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Text.RegularExpressions;
using Server.Core.Config;

namespace Server.Utilities
{
    class CUtilities
    {
        static Random _rRandom = new Random();

        public static Int32 RandomInt(Int32 iMin, Int32 iMax)
        {
            try
            {
                return _rRandom.Next(iMin, iMax);
            }
            catch { }

            return -1;
        }

        public static String RandomString(Int32 iLength)
        {
            if (iLength == 0) return String.Empty;

            try
            {
                String strOut = String.Empty;

                char[] arr_cChars = "abcdefghijklmnopqrstuvzxywABCDEFGHIJKLMNOPQRSTUVZXYW".ToCharArray();

                while(strOut.Length != iLength)
                {
                    Int32 iRandChar = RandomInt(0, arr_cChars.Length);

                    if (iRandChar != -1)
                        strOut += arr_cChars[iRandChar];
                }

                return strOut;
            }
            catch { }

            return String.Empty;
        }

        public static List<Byte[]> SplitBytes(Byte[] arr_bInput, Int32 iSize)
        {
            List<Byte[]> lstChunks = new List<Byte[]>();

            List<Byte> lstChunk = new List<Byte>();

            int iCurrentIndex = 0;
            for (int i = 0; i < arr_bInput.Length; i++)
            {
                iCurrentIndex++;
                lstChunk.Add(arr_bInput[i]);
                if (iCurrentIndex == iSize ||
                    i == arr_bInput.Length - 1)
                {
                    lstChunks.Add(lstChunk.ToArray());
                    lstChunk.Clear();
                    iCurrentIndex = 0;
                }
            }
            return lstChunks;
        }
        
        public static bool IsRSAKey(string strData)
        {
        	try
        	{
        		return strData.StartsWith("<RSAKeyValue><Modulus>") && strData.EndsWith("</Exponent></RSAKeyValue>");
        	}
        	catch {}
        	return false;
        }
        
        public static int GetPageCount(int iTotal)
        {
            try
            {
                decimal iCount = (decimal)iTotal / CConfig.ResultsPerPage;
                return (int)Math.Ceiling(iCount);
            }
            catch { }
            return 0;
        }

    }
}
