using Server.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Server.Core.Network
{
    public class CPacketBlock
    {
        public Int32 Block_ID { get; set; }
        public Byte[] Block_Buffer { get; set; }
        public Boolean IsFinished { get; set; }

        public CPacketBlock()
        {
            this.IsFinished = false;
        }

        public override String ToString()
        {
            return String.Format("{0}|{1}", this.Block_ID, Convert.ToBase64String(this.Block_Buffer));
        }
    }

    public class CPacketHeader
    {
        public String Packet_Ident;
        public Byte Packet { get; set; }

        public Int32 Block_Amount;

        public static CPacketHeader CreateHeader(Byte Packet, Int32 iBlockAmount)
        {
            try
            {
                CPacketHeader Header = new CPacketHeader();
                Header.Packet_Ident = CUtilities.RandomString(8);
                Header.Packet = Packet;
                Header.Block_Amount = iBlockAmount;
                return Header;
            }
            catch { }
            return null;
        }

        public Byte[] ToByteArray()
        {
        	try
        	{
        		byte[] arr_bData = UnicodeEncoding.Unicode.GetBytes(String.Format("{0}|{1}", Packet_Ident, Block_Amount));
        		
        		Byte[] arr_bBuffer = new byte[1 + arr_bData.Length];
        		arr_bBuffer[0] = Packet;
        		Buffer.BlockCopy(arr_bData, 0, arr_bBuffer, 1, arr_bData.Length);
        		
        		return arr_bBuffer;
        	} catch {}
        	return null;
        }
    }

    public class CPacket
    {
        public CPacketHeader PacketHeader = null;
        public List<CPacketBlock> Data_Blocks = null;

        public CPacket(CPacketHeader Header)
        {
            this.PacketHeader = Header;

            if (Header.Block_Amount > 0)
                Data_Blocks = new List<CPacketBlock>();
        }

        public Boolean IsFinished()
        {
            if (Data_Blocks != null)
            {
                lock (Data_Blocks)
                {
                    foreach (CPacketBlock Block in Data_Blocks.ToArray())
                    {
                        if (!Block.IsFinished) return false;
                    }
                }
            }
            return true;
        }

        public Byte GetPacketFromHeader()
        {
            return PacketHeader.Packet;
        }

        /// <summary>
        /// This is not to be used for sending data. Only for Receive operations.
        /// </summary>
        /// <returns></returns>
        public byte[] GetPacketBufferFromBlocks()
        {
        	if(PacketHeader.Block_Amount == 0) return null;
        	
            List<byte> lstBuffer = new List<byte>();

            foreach (CPacketBlock Block in Data_Blocks.ToArray())
            {
                foreach (Byte b in Block.Block_Buffer)
                    lstBuffer.Add(b);
            }

            return lstBuffer.ToArray();
        }

        public Byte[] GetBlockBuffer(Int32 iIndex)
        {
            return Data_Blocks[iIndex].Block_Buffer;
        }
    }
}
