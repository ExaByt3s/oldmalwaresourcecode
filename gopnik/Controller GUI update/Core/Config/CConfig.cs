using System;
using System.Collections.Generic;
using System.Text;

namespace Controller.Core.Config
{
    class CConfig
    {
        #region BOTLIST_PAGE_EVENTS
        public delegate void delOnChangeCurrentBotPage(int iCurrentBotPage);
        public event delOnChangeCurrentBotPage OnChangeCurrentBotPage;
        public delegate void delOnChangeTotalBotPages(int iTotalBotPages);
        public event delOnChangeTotalBotPages OnChangeTotalBotPages;
        #endregion

        #region STEALERLIST_PAGE_EVENTS
        public delegate void delOnChangeCurrentStealerPage(int iCurrentStealerPage);
        public event delOnChangeCurrentStealerPage OnChangeCurrentStealerPage;
        public delegate void delOnChangeTotalStealerPages(int iTotalStealerPages);
        public event delOnChangeTotalStealerPages OnChangeTotalStealerPages;
        #endregion

        #region KEYLOGLIST_PAGE_EVENTS
        public delegate void delOnChangeCurrentKeylogPage(int iCurrentKeylogPage);
        public event delOnChangeCurrentKeylogPage OnChangeCurrentKeylogPage;
        public delegate void delOnChangeTotalKeylogPages(int iTotalKeylogPages);
        public event delOnChangeTotalKeylogPages OnChangeTotalKeylogPages;
        #endregion

        #region STATISTICS_EVENTS
        public delegate void delOnChangeTotalBots(int iTotalBots);
        public event delOnChangeTotalBots OnChangeTotalBots;
        public delegate void delOnChangeOnlineBots(int iOnlineBots);
        public event delOnChangeOnlineBots OnChangeOnlineBots;
        public delegate void delOnChangeTotalTasks(int iTotalTasks);
        public event delOnChangeTotalTasks OnChangeTotalTasks;
        public delegate void delOnChangeTotalDdos(int iTotalDdos);
        public event delOnChangeTotalDdos OnChangeTotalDdos;
        public delegate void delOnChangeTotalBrowserStealer(int iTotalBrowserStealer);
        public event delOnChangeTotalBrowserStealer OnChangeTotalBrowserStealer;
        public delegate void delOnChangeTotalKeylog(int iTotalKeylog);
        public event delOnChangeTotalKeylog OnChangeTotalKeylog;
        public delegate void delOnChangeAVGCPU(int iAVGCPU);
        public event delOnChangeAVGCPU OnChangeAVGCPU;
        #endregion

        //Command and Control Settings
        public string Tor_Host, OnionAddress;
        public int Tor_Port, OnionPort;

        //Pages
        #region BOTLIST_PAGES
        private int iCurrentBotPage;
        public int CurrentBotPage
        {
            get
            {
                return iCurrentBotPage;
            }
            set
            {
                iCurrentBotPage = value;

                if (this.OnChangeCurrentBotPage != null)
                    this.OnChangeCurrentBotPage.Invoke(iCurrentBotPage);
            }   
        }
        private int iTotalBotPages;

        public int TotalBotPages
        {
            get
            {
                return iTotalBotPages;
            }
            set
            {
                iTotalBotPages = value;

                if (this.OnChangeTotalBotPages != null)
                    this.OnChangeTotalBotPages.Invoke(iTotalBotPages);
            }
        }
        #endregion

        #region STEALERLIST_PAGES
        private int iCurrentStealerPage, iTotalStealerPages;
        public int CurrentStealerPage
        {
            get
            {
                return iCurrentStealerPage;
            }
            set
            {
                iCurrentStealerPage = value;

                if (this.OnChangeCurrentStealerPage != null)
                    this.OnChangeCurrentStealerPage.Invoke(iCurrentStealerPage);
            }
        }

        public int TotalStealerPages
        {
            get
            {
                return iTotalStealerPages;
            }
            set
            {
                iTotalStealerPages = value;

                if (this.OnChangeTotalStealerPages != null)
                    this.OnChangeTotalStealerPages.Invoke(iTotalStealerPages);
            }
        }
        #endregion

        #region KEYLOGLIST_PAGES
        private int iCurrentKeylogPage, iTotalKeylogPages;
        public int CurrentKeylogPage
        {
            get
            {
                return iCurrentKeylogPage;
            }
            set
            {
                iCurrentKeylogPage = value;

                if (this.OnChangeCurrentKeylogPage != null)
                    this.OnChangeCurrentKeylogPage.Invoke(iCurrentKeylogPage);
            }
        }

        public int TotalKeylogPages
        {
            get
            {
                return iTotalKeylogPages;
            }
            set
            {
                iTotalKeylogPages = value;

                if (this.OnChangeTotalKeylogPages != null)
                    this.OnChangeTotalKeylogPages.Invoke(iTotalKeylogPages);
            }
        }
        #endregion

        //Data
        private int iTotalBots, iOnlineTotal, iTotalTasks, iTotalDdos, iTotalBrowserStealer, iTotalKeylog;
        
        public int TotalBots
        {
            get
            {
                return iTotalBots;
            }
            set
            {
                iTotalBots = value;

                if (this.OnChangeTotalBots != null)
                    this.OnChangeTotalBots.Invoke(iTotalBots);
            }
        }

        public int OnlineTotal
        {
            get
            {
                return iOnlineTotal;
            }
            set
            {
                iOnlineTotal = value;

                if (this.OnChangeOnlineBots != null)
                    this.OnChangeOnlineBots.Invoke(iOnlineTotal);
            }
        }

        public int TotalTasks
        {
            get
            {
                return iTotalTasks;
            }
            set
            {
                iTotalTasks = value;

                if (this.OnChangeTotalTasks != null)
                    this.OnChangeTotalTasks.Invoke(iTotalTasks);
            }
        }

        public int TotalDdos
        {
            get
            {
                return iTotalDdos;
            }
            set
            {
                iTotalDdos = value;

                if (this.OnChangeTotalDdos != null)
                    this.OnChangeTotalDdos.Invoke(iTotalDdos);
            }
        }

        public int TotalBrowserStealer
        {
            get
            {
                return iTotalBrowserStealer;
            }
            set
            {
                iTotalBrowserStealer = value;

                if (this.OnChangeTotalBrowserStealer != null)
                    this.OnChangeTotalBrowserStealer.Invoke(iTotalBrowserStealer);
            }
        }

        public int TotalKeylog
        {
            get
            {
                return iTotalKeylog;
            }
            set
            {
                iTotalKeylog = value;

                if (this.OnChangeTotalKeylog != null)
                    this.OnChangeTotalKeylog.Invoke(iTotalKeylog);
            }
        }

        private int iAVGCPU = 0;

        public int AverageCPUUsage
        {
            get
            {
                return iAVGCPU;
            }
            set
            {
                iAVGCPU = value;

                if (this.OnChangeAVGCPU != null)
                    this.OnChangeAVGCPU.Invoke(iAVGCPU);
            }
        }

        //Authorization
        public bool IsAuthorized = false;
        public string AdminUsername, AdminPassword, AdminPublicKey, AdminPrivateKey;
        
        public int ResultsPerPage = -1;
    }
}
