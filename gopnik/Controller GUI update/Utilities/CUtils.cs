using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

using Controller.Core.Config;
using DevExpress.XtraGrid.Views.Grid;
using System.Data;

namespace Controller.Utilities
{
    class CUtils
    {
        static Random _rRandom = new Random();

        public static Int32 RandomInt(Int32 iMin, Int32 iMax)
        {
            try
            {
                return _rRandom.Next(iMin, iMax);
            }
            catch { }

            return -1;
        }

        public static String RandomString(Int32 iLength)
        {
            if (iLength == 0) return String.Empty;

            try
            {
                String strOut = String.Empty;

                char[] arr_cChars = "abcdefghijklmnopqrstuvzxywABCDEFGHIJKLMNOPQRSTUVZXYW".ToCharArray();

                while (strOut.Length != iLength)
                {
                    Int32 iRandChar = RandomInt(0, arr_cChars.Length);

                    if (iRandChar != -1)
                        strOut += arr_cChars[iRandChar];
                }

                return strOut;
            }
            catch { }

            return String.Empty;
        }

        public static String SetCurrentPage(String strInputData, Int32 iCurrentPage)
        {
            String strCurrentPage = strInputData;
            Int32 iIndex = strCurrentPage.IndexOf(':');
            strCurrentPage = strCurrentPage.Remove(0, iIndex + 3);
            strCurrentPage = strCurrentPage.Insert(0, String.Format("Page: {0}", iCurrentPage));
            return strCurrentPage;
        }

        public static String SetTotalPages(String strInputData, Int32 iTotalPages)
        {
            String strCurrentPage = strInputData;
            Int32 iIndex = strCurrentPage.IndexOf('/');
            strCurrentPage = strCurrentPage.Remove(iIndex + 1);
            strCurrentPage = strCurrentPage.Insert(iIndex + 1, iTotalPages.ToString());
            return strCurrentPage;
        }

        public static string SetTotalBots(string strInputData, int iTotalBots)
        {
            //"Botlist (Online/Total)"

            string strTotalBots = strInputData;

            string strOnlineBots = strTotalBots.Remove(strTotalBots.IndexOf('/'));
            strOnlineBots = strOnlineBots.Remove(0, strOnlineBots.IndexOf('(') + 1);

            strTotalBots = string.Format("Botlist ({0}/{1})", strOnlineBots, iTotalBots);

            return strTotalBots;
        }

        public static string SetOnlineBots(string strInputData, int iOnlineBots)
        {
            string strOnlineBots = strInputData;

            string strTotalBots = strOnlineBots.Remove(0, strOnlineBots.IndexOf('/') + 1);
            strTotalBots = strTotalBots.Remove(strTotalBots.IndexOf(')'));

            strOnlineBots = string.Format("Botlist ({0}/{1})", iOnlineBots, strTotalBots);

            return strOnlineBots;
        }
        public static Process GetProcessByName(String strName)
        {
            try
            {
                foreach (Process pProcess in Process.GetProcesses())
                {
                    try
                    {
                        if (pProcess.ProcessName == strName)
                            return pProcess;
                    }
                    catch
                    {
                    	
                    }
                }
            }
            catch
            {
            	
            }
            return null;
        }

        public static List<Byte[]> SplitBytes(Byte[] arr_bInput, Int32 iSize)
        {
            List<Byte[]> lstChunks = new List<Byte[]>();

            List<Byte> lstChunk = new List<Byte>();

            int iCurrentIndex = 0;
            for (int i = 0; i < arr_bInput.Length; i++)
            {
                iCurrentIndex++;
                lstChunk.Add(arr_bInput[i]);
                if (iCurrentIndex == iSize || 
                    i == arr_bInput.Length - 1)
                {
                    lstChunks.Add(lstChunk.ToArray());
                    lstChunk.Clear();
                    iCurrentIndex = 0;
                }
            }
            return lstChunks;
        }
        
        public static int GetPageCount(int iDataCount)
        {
            try
            {
                decimal iCount = (decimal)iDataCount / Program.ControllerConfig.ResultsPerPage;
                return (int)Math.Ceiling(iCount);
            }
            catch { }
            return 0;
        }
        
        public static bool ReplaceRowCellValue(GridView gvData, string strIdentificator, string strField, object objValue)
        {
            try
            {
                for (int i = 0; i < gvData.RowCount; i++)
                {
                    DataRowView row = (DataRowView)gvData.GetRow(i);
                    if (row.Row[0].ToString() == strIdentificator)
                    {
                        gvData.SetRowCellValue(i, strField, objValue);
                    }
                }
                return true;
            }
            catch { }

            return false;
        }
    }
}
