using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace Controller.Security
{
    class CAES
    {
        private RijndaelManaged AES = null;

        public CAES(String strKey)
        {
            AES = new RijndaelManaged();
            AES.KeySize = 256;
            AES.BlockSize = 256;
            AES.Padding = PaddingMode.PKCS7;
            AES.Mode = CipherMode.CBC;

            Byte[] arr_bKey = UnicodeEncoding.Unicode.GetBytes(strKey);

            AES.Key = SHA256(arr_bKey);
            AES.IV = SHA256(SHA256(arr_bKey));
        }

        public CAES(Byte[] arr_bKey)
        {
            AES = new RijndaelManaged();
            AES.KeySize = 256;
            AES.BlockSize = 256;
            AES.Padding = PaddingMode.PKCS7;
            AES.Mode = CipherMode.CBC;
            AES.Key = SHA256(arr_bKey);
            AES.IV = SHA256(SHA256(arr_bKey));
        }

        public Byte[] Encrypt(Byte[] arr_bBuffer)
        {
            if (AES == null) return null;

            try
            {
                ICryptoTransform AESEncrypt = AES.CreateEncryptor(AES.Key, AES.IV);
                return AESEncrypt.TransformFinalBlock(arr_bBuffer, 0, arr_bBuffer.Length);
            }
            catch { }
            return null;
        }

        public Byte[] Decrypt(Byte[] arr_bBuffer)
        {
            if (AES == null) return null;
            try
            {
                ICryptoTransform AESDecrypt = AES.CreateDecryptor(AES.Key, AES.IV);
                return AESDecrypt.TransformFinalBlock(arr_bBuffer, 0, arr_bBuffer.Length);
            }
            catch { }
            return null;
        }

        public static byte[] SHA256(Byte[] arr_bBuffer)
        {
            try
            {
                return new SHA256Managed().ComputeHash(arr_bBuffer);
            }
            catch { }
            return null;
        }
    }
}
