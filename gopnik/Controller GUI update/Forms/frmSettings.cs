using Controller.Core.Config;
using Controller.Core.Settings;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Controller.Forms
{
    public partial class frmSettings : DevExpress.XtraEditors.XtraForm
    {
        public frmSettings()
        {
            InitializeComponent();
        }

        private void frmSettings_Load(object sender, EventArgs e)
        {
            //Load Tor Tab
            this.txtTorIPAddress.Text = Program.ControllerConfig.Tor_Host;
            this.txtTorPort.Text = Program.ControllerConfig.Tor_Port.ToString();

            //Load connection tab
            this.txtOnionAddress.Text = Program.ControllerConfig.OnionAddress;
            this.txtOnionPort.Text = Program.ControllerConfig.OnionPort.ToString();
            this.txtUsername.Text = Program.ControllerConfig.AdminUsername;
            this.txtPassword.Text = Program.ControllerConfig.AdminPassword;
        }

        private void btnSaveSettings_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.IsNullOrEmpty(txtOnionAddress.Text))
                    throw new Exception("Onion Address is not provided.");
                if (String.IsNullOrEmpty(txtOnionPort.Text))
                    throw new Exception("Onion Port is not provided.");
                if (String.IsNullOrEmpty(txtUsername.Text))
                    throw new Exception("Auth Username is not provided.");
                if (String.IsNullOrEmpty(txtPassword.Text))
                    throw new Exception("Auth Password is not provided.");
                if (String.IsNullOrEmpty(txtTorIPAddress.Text))
                    throw new Exception("Tor IP is not provided.");
                if (String.IsNullOrEmpty(txtTorPort.Text))
                    throw new Exception("Tor Port is not provided.");

                Int32 iOnionPort = -1;

                if (Int32.TryParse(txtOnionPort.Text, out iOnionPort) == false)
                    throw new Exception("Onion Port is invalid.");

                Int32 iTorPort = -1;

                if (Int32.TryParse(txtTorPort.Text, out iTorPort) == false)
                    throw new Exception("Tor Port is invalid.");

                //Set Config
                Program.ControllerConfig.OnionAddress = txtOnionAddress.Text;
                Program.ControllerConfig.OnionPort = iOnionPort;
                Program.ControllerConfig.AdminUsername = txtUsername.Text;
                Program.ControllerConfig.AdminPassword = txtPassword.Text;
                Program.ControllerConfig.Tor_Host = txtTorIPAddress.Text;
                Program.ControllerConfig.Tor_Port = iTorPort;

                //Set Values for Settings
                CSettings.SetValue("OnionAddress", Program.ControllerConfig.OnionAddress);
                CSettings.SetValue("OnionPort", Program.ControllerConfig.OnionPort);
                CSettings.SetValue("TorIP", Program.ControllerConfig.Tor_Host);
                CSettings.SetValue("TorPort", Program.ControllerConfig.Tor_Port);
                CSettings.SetValue("AdminUsername", Program.ControllerConfig.AdminUsername);
                CSettings.SetValue("AdminPassword", Program.ControllerConfig.AdminPassword);

                //Save Settings
                if (CSettings.SaveSettings())
                    MessageBox.Show("Settings saved.");
                else
                    MessageBox.Show("Failed saving Settings. Controller will still work.");
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }
}
