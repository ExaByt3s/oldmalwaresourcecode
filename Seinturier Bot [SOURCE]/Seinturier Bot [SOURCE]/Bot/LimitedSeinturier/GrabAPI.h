#include <windows.h>

LPVOID GetApiAddr( HMODULE hModule, DWORD dwProcNameHash );

#define RVATOVA( base, offset ) ( (DWORD)base + (DWORD)offset )

LPVOID GetProcAddressEx( char *Dll, DWORD dwModule, DWORD dwProcNameHash);

template <DWORD h, DWORD hash>
inline LPVOID pushargEx()
{	
	typedef LPVOID (WINAPI *newfunc)();
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func();
}

template <DWORD h, DWORD hash, class A>
inline LPVOID pushargEx(A a1)
{	
	typedef LPVOID (WINAPI *newfunc)(A);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1);
}

template <DWORD h, DWORD hash, class A, class B>
inline LPVOID pushargEx(A a1,  B a2)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1,a2);
}

template <DWORD h, DWORD hash, class A, class B, class C>
inline LPVOID pushargEx(A a1,  B a2, C a3)
{
	typedef LPVOID (WINAPI *newfunc)(A, B, C);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1,a2,a3);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1,a2,a3,a4);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E, class F>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5, F a6)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E, F);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5, a6);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E, class F, class G>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5, F a6, G a7)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E, F, G);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5, a6, a7);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E, F, G, H);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5, a6, a7, a8);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E, F, G, H, I);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I, class X>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9, X a10)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E, F, G, H, I, X);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I, class X, class Y>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9, X a10, Y a11 )
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E, F, G, H, I, X, Y);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

template <DWORD h, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I, class X, class Y, class Z, class R>
inline LPVOID pushargEx(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9, X a10, Y a11, Z a12, R a13)
{	
	typedef LPVOID (WINAPI *newfunc)(A, B, C, D, E, F, G, H, I, X, Y, Z, R);
	newfunc func = (newfunc)GetProcAddressEx( NULL, h, hash );
	return func(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

//ntdll
#define pRtlInitUnicodeString 		pushargEx<5,0x3287EC73>
#define pRtlInitAnsiString			pushargEx<5,0xEE02056A>
#define pNtOpenFile 				pushargEx<5,0x9C45B56C>
#define pNtOpenDirectoryObject 		pushargEx<5,0xF5F11CF0>
#define pNtCreateSection 			pushargEx<5,0x6E6F608B>
#define pNtOpenSection 				pushargEx<5,0x5FA9AB38>
#define pZwLoadDriver 				pushargEx<5,0x42F57D33>
#define pZwUnloadDriver 			pushargEx<5,0x95849B61>
#define pRtlAdjustPrivilege 		pushargEx<5,0xC2A6B1AE>
#define pZwMakeTemporaryObject 		pushargEx<5,0x128CE9D3>
#define pNtClose 					pushargEx<5,0x3D9AC241>
#define pRtlImageNtHeader			pushargEx<5,0xDD39FD14>
#define pZwQuerySystemInformation	pushargEx<5,0xBC44A131>
#define pZwUnmapViewOfSection		pushargEx<5,0x9ED4D161>
#define pZwMapViewOfSection			pushargEx<5,0x594D9A3C>
#define pZwQueueApcThread			pushargEx<5,0xC0E4F6EE>
#define pZwResumeThread				pushargEx<5,0xACF8BF39>
#define pZwTestAlert				pushargEx<5,0xC952A06B>
#define pZwQueryInformationThread	pushargEx<5,0xFAEDF3AA>
#define pZwOpenProcess				pushargEx<5,0x9C0AC99D>
#define pZwOpenProcessToken			pushargEx<5,0xADACBE07>
#define pZwClose					pushargEx<5,0x3D9A9259>
#define pZwAllocateVirtualMemory	pushargEx<5,0x594AA9E4>
#define pZwFreeVirtualMemory		pushargEx<5,0xBED3922C>
#define pZwWriteVirtualMemory		pushargEx<5,0xEEE7AF23>
#define pZwProtectVirtualMemory		pushargEx<5,0x3836C63E>
#define pRtlCreateUserThread		pushargEx<5,0xE9E0A4F7>
#define pLdrLoadDll					pushargEx<5,0x78740534>
#define pLdrGetDllHandle			pushargEx<5,0x7E287C6A>
#define pLdrGetProcedureAddress		pushargEx<5,0x323C2875>
#define pZwSetContextThread			pushargEx<5,0x62E2FE6F>
#define pZwSetInformationProcess	pushargEx<5,0xCA2BF652>
#define pNtAllocateVirtualMemory	pushargEx<5,0x952A9E4>
#define pZwDuplicateToken			pushargEx<5,0x89678F29>
