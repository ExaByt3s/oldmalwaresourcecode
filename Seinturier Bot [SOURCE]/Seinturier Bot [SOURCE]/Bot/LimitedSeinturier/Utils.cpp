#include <Windows.h>
#include <ShlObj.h>

#include "Utils.h"


char* WINAPI ToAnsi(LPCWSTR String)
{
	if ( !String) return NULL;

	int l = (int)WideCharToMultiByte ( CP_ACP, 0, String, -1, 0, 0, NULL, NULL);
	char *r = (char*)malloc( l + 1 );

	WideCharToMultiByte(1251, 0, String, -1, r, l, NULL, NULL);

	return r;
}


WCHAR *AnsiToUnicode( char *AnsiString, DWORD dwStrLen )
{
	wchar_t* res = 0;
	if( dwStrLen == 0 ) dwStrLen = -1;
	int resLen = (int)MultiByteToWideChar( CP_ACP, 0, AnsiString, dwStrLen, 0, 0);
	if( resLen == 0 ) return 0;
	res = (wchar_t*)malloc(resLen);
 	if( res == 0 ) return 0;
	if( !MultiByteToWideChar( CP_ACP, 0, AnsiString, -1, res, resLen ) )
	{
		free(res);
		res = 0;
	}
 	return res;
}


WCHAR *GetShellFoldersKey( DWORD dwParam )
{
	DWORD dwTemp = 0;

	if ( dwParam == 1 )
	{
		dwTemp = CSIDL_STARTUP; //xp and down
	}
	else if ( dwParam == 2 )
	{
		dwTemp = CSIDL_APPDATA; // vista and up
	}
	else if ( dwParam == 3 )
	{
		dwTemp = CSIDL_PROGRAM_FILES; //vista and up with admin rights
	}

	WCHAR *UserPath = (WCHAR*)malloc( 512 );

	if ( UserPath == NULL )
	{
		return NULL;
	}

	SHGetSpecialFolderPathW( 0, UserPath, dwTemp, FALSE );

	return UserPath;
}

DWORD CalcHash( char *Str )
{
	if ( !Str )
	{
		return -1;
	}

	DWORD dwHash = 0;
	char *CopyStr = Str;
	
	while ( *CopyStr ) 
	{
		dwHash = ( ( dwHash << 7 ) & (DWORD)( -1 ) ) | ( dwHash >> ( 32 - 7 ) );
		dwHash = dwHash ^ ( *CopyStr );
		CopyStr++;
	}

	return dwHash;
}

DWORD CalcHashW( PWSTR str )
{
	if ( !str )
	{
		return 0;
	}

    DWORD hash = 0;
    PWSTR s = str;

    while (*s) 
    {
        hash = ((hash << 7) & (DWORD)-1) | (hash >> (32 - 7));
        hash = hash ^ *s;
        s++;
    }

    return hash;
}

DWORD GetExplorerPid()
{
	DWORD pid = 0;
	char Class[] = {'S','h','e','l','l','_','T','r','a','y','W','n','d',0};
	GetWindowThreadProcessId(FindWindowA(Class, NULL), &pid);
	return pid;
}

bool RunFileEx( WCHAR *Path, DWORD dwFlags, PHANDLE hProcess, PHANDLE hThread )
{
	STARTUPINFOW si;
	PROCESS_INFORMATION pi;

	memset( &si, 0, sizeof( STARTUPINFOW ) );	
	memset( &pi, 0, sizeof( PROCESS_INFORMATION ) );	
	
	si.cb		   = sizeof( STARTUPINFO );
	si.dwFlags     = STARTF_USESHOWWINDOW;
	si.wShowWindow = 1;

	if (CreateProcessW( Path, NULL, NULL, NULL, FALSE, dwFlags, NULL, NULL, &si, &pi ) != 0 )
	{
		*hProcess = pi.hProcess;
		*hThread  = pi.hThread;

		return true;
	}	

	return false;
}

bool RunFile( WCHAR *Path )
{
	HANDLE hThread;
	HANDLE hProcess;

	if ( RunFileEx( Path, NORMAL_PRIORITY_CLASS, &hProcess, &hThread ) )
	{
		return true;
	}

	return false;
}