/*
	BotKiller 1.0
	gBot Plugin
	~ jam3s/fubar;
*/

#include "StdAfx.h"

node *first = NULL;

void list_insert(int id, char IP[MAX_PATH], long PORT, DWORD PID, char PATH[MAX_PATH])
{
	// try to instantiate node for connection
	node *newptr = (node *)malloc(sizeof(node));
	if (newptr == NULL)
		return;

	// initialize node
	newptr->next = NULL;

	// try to instantiate connection
	newptr->connection = (_Tcplist *)malloc(sizeof(_Tcplist));
	if (newptr->connection == NULL)
	{
		free(newptr);
		return;
	}

	// try to initialize connection (these might need to be using strcpy, idk)
	newptr->connection->id = id;
	newptr->connection->port = PORT;
	newptr->connection->pid = PID;
	strcpy(newptr->connection->ip, IP);
	strcpy(newptr->connection->processpath, PATH);

	if (newptr->connection->id == NULL
		 || newptr->connection->ip == NULL
		 || newptr->connection->port == NULL
		 || newptr->connection->pid == NULL
		 || newptr->connection->processpath == NULL
	)
	{
		if (newptr->connection->ip != NULL)
			free(newptr->connection->ip);
		if (newptr->connection->processpath != NULL)
			free(newptr->connection->processpath);

		free(newptr->connection);
		free(newptr);
		return;
	}

	// check for empty list
	if (first == NULL)
		first = newptr;

	// else check if connection belongs at list's head (sorting by id)
	else if (newptr->connection->id < first->connection->id)
	{
		newptr->next = first;
		first = newptr;
	}

	// else try to insert connection in middle or tail
	else
	{
		node *predptr = first;
		while (true)
		{
			// avoid duplicates
			if (predptr->connection->id == newptr->connection->id)
			{
				free(newptr->connection->ip);
				free(newptr->connection->processpath);
				free(newptr->connection);
				free(newptr);
				break;
			}

			// check for insertion at tail
			else if (predptr->next == NULL)
			{
				predptr->next = newptr;
				break;
			}

			// check for insertion in middle
			else if (predptr->next->connection->id > newptr->connection->id)
			{
				newptr->next = predptr->next;
				predptr->next = newptr;
				break;
			}

			// update pointer
			predptr = predptr->next;
		}
	}
	return;
}

_Tcplist *list_get_entry(long id)
{
	node *ptr = first;
	long count = 0;

	while (ptr != NULL)
	{
		if (count == id)
		{
			return ptr->connection;
			break;
		}
		ptr = ptr->next;
		count++;
	}
	return 0;
}